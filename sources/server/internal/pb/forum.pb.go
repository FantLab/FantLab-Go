// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/forum.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Forum_Topic_Type int32

const (
	Forum_Topic_UNKNOWN_TYPE Forum_Topic_Type = 0
	// тема
	Forum_Topic_TOPIC Forum_Topic_Type = 1
	// опрос
	Forum_Topic_POLL Forum_Topic_Type = 2
)

var Forum_Topic_Type_name = map[int32]string{
	0: "UNKNOWN_TYPE",
	1: "TOPIC",
	2: "POLL",
}

var Forum_Topic_Type_value = map[string]int32{
	"UNKNOWN_TYPE": 0,
	"TOPIC":        1,
	"POLL":         2,
}

func (x Forum_Topic_Type) String() string {
	return proto.EnumName(Forum_Topic_Type_name, int32(x))
}

func (Forum_Topic_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f9223c5c45cf6da7, []int{0, 3, 0}
}

type Forum struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Forum) Reset()         { *m = Forum{} }
func (m *Forum) String() string { return proto.CompactTextString(m) }
func (*Forum) ProtoMessage()    {}
func (*Forum) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9223c5c45cf6da7, []int{0}
}

func (m *Forum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Forum.Unmarshal(m, b)
}
func (m *Forum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Forum.Marshal(b, m, deterministic)
}
func (m *Forum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forum.Merge(m, src)
}
func (m *Forum) XXX_Size() int {
	return xxx_messageInfo_Forum.Size(m)
}
func (m *Forum) XXX_DiscardUnknown() {
	xxx_messageInfo_Forum.DiscardUnknown(m)
}

var xxx_messageInfo_Forum proto.InternalMessageInfo

type Forum_TopicLink struct {
	// id темы
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// название
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Forum_TopicLink) Reset()         { *m = Forum_TopicLink{} }
func (m *Forum_TopicLink) String() string { return proto.CompactTextString(m) }
func (*Forum_TopicLink) ProtoMessage()    {}
func (*Forum_TopicLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9223c5c45cf6da7, []int{0, 0}
}

func (m *Forum_TopicLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Forum_TopicLink.Unmarshal(m, b)
}
func (m *Forum_TopicLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Forum_TopicLink.Marshal(b, m, deterministic)
}
func (m *Forum_TopicLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forum_TopicLink.Merge(m, src)
}
func (m *Forum_TopicLink) XXX_Size() int {
	return xxx_messageInfo_Forum_TopicLink.Size(m)
}
func (m *Forum_TopicLink) XXX_DiscardUnknown() {
	xxx_messageInfo_Forum_TopicLink.DiscardUnknown(m)
}

var xxx_messageInfo_Forum_TopicLink proto.InternalMessageInfo

func (m *Forum_TopicLink) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Forum_TopicLink) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type Forum_LastMessage struct {
	// id сообщения
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// тема, в которую входит сообщение
	Topic *Forum_TopicLink `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// автор
	User *Common_UserLink `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// текст
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// дата и время создания
	Date                 *timestamp.Timestamp `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Forum_LastMessage) Reset()         { *m = Forum_LastMessage{} }
func (m *Forum_LastMessage) String() string { return proto.CompactTextString(m) }
func (*Forum_LastMessage) ProtoMessage()    {}
func (*Forum_LastMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9223c5c45cf6da7, []int{0, 1}
}

func (m *Forum_LastMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Forum_LastMessage.Unmarshal(m, b)
}
func (m *Forum_LastMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Forum_LastMessage.Marshal(b, m, deterministic)
}
func (m *Forum_LastMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forum_LastMessage.Merge(m, src)
}
func (m *Forum_LastMessage) XXX_Size() int {
	return xxx_messageInfo_Forum_LastMessage.Size(m)
}
func (m *Forum_LastMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_Forum_LastMessage.DiscardUnknown(m)
}

var xxx_messageInfo_Forum_LastMessage proto.InternalMessageInfo

func (m *Forum_LastMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Forum_LastMessage) GetTopic() *Forum_TopicLink {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Forum_LastMessage) GetUser() *Common_UserLink {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Forum_LastMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Forum_LastMessage) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

type Forum_TopicMessage struct {
	// id сообщения
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// данные о создании
	Creation *Common_Creation `protobuf:"bytes,2,opt,name=creation,proto3" json:"creation,omitempty"`
	// текст
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// текст изъят модератором?
	IsCensored bool `protobuf:"varint,4,opt,name=is_censored,json=isCensored,proto3" json:"is_censored,omitempty"`
	// статистика
	Stats                *Forum_TopicMessage_Stats `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Forum_TopicMessage) Reset()         { *m = Forum_TopicMessage{} }
func (m *Forum_TopicMessage) String() string { return proto.CompactTextString(m) }
func (*Forum_TopicMessage) ProtoMessage()    {}
func (*Forum_TopicMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9223c5c45cf6da7, []int{0, 2}
}

func (m *Forum_TopicMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Forum_TopicMessage.Unmarshal(m, b)
}
func (m *Forum_TopicMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Forum_TopicMessage.Marshal(b, m, deterministic)
}
func (m *Forum_TopicMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forum_TopicMessage.Merge(m, src)
}
func (m *Forum_TopicMessage) XXX_Size() int {
	return xxx_messageInfo_Forum_TopicMessage.Size(m)
}
func (m *Forum_TopicMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_Forum_TopicMessage.DiscardUnknown(m)
}

var xxx_messageInfo_Forum_TopicMessage proto.InternalMessageInfo

func (m *Forum_TopicMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Forum_TopicMessage) GetCreation() *Common_Creation {
	if m != nil {
		return m.Creation
	}
	return nil
}

func (m *Forum_TopicMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Forum_TopicMessage) GetIsCensored() bool {
	if m != nil {
		return m.IsCensored
	}
	return false
}

func (m *Forum_TopicMessage) GetStats() *Forum_TopicMessage_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type Forum_TopicMessage_Stats struct {
	// рейтинг
	Rating               int64    `protobuf:"varint,1,opt,name=rating,proto3" json:"rating,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Forum_TopicMessage_Stats) Reset()         { *m = Forum_TopicMessage_Stats{} }
func (m *Forum_TopicMessage_Stats) String() string { return proto.CompactTextString(m) }
func (*Forum_TopicMessage_Stats) ProtoMessage()    {}
func (*Forum_TopicMessage_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9223c5c45cf6da7, []int{0, 2, 0}
}

func (m *Forum_TopicMessage_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Forum_TopicMessage_Stats.Unmarshal(m, b)
}
func (m *Forum_TopicMessage_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Forum_TopicMessage_Stats.Marshal(b, m, deterministic)
}
func (m *Forum_TopicMessage_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forum_TopicMessage_Stats.Merge(m, src)
}
func (m *Forum_TopicMessage_Stats) XXX_Size() int {
	return xxx_messageInfo_Forum_TopicMessage_Stats.Size(m)
}
func (m *Forum_TopicMessage_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Forum_TopicMessage_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Forum_TopicMessage_Stats proto.InternalMessageInfo

func (m *Forum_TopicMessage_Stats) GetRating() int64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

type Forum_Topic struct {
	// id темы
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// название
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// тип
	TopicType Forum_Topic_Type `protobuf:"varint,3,opt,name=topic_type,json=topicType,proto3,enum=Forum_Topic_Type" json:"topic_type,omitempty"`
	// данные о создании
	Creation *Common_Creation `protobuf:"bytes,4,opt,name=creation,proto3" json:"creation,omitempty"`
	// тема закрыта?
	IsClosed bool `protobuf:"varint,5,opt,name=is_closed,json=isClosed,proto3" json:"is_closed,omitempty"`
	// тема закреплена?
	IsPinned bool `protobuf:"varint,6,opt,name=is_pinned,json=isPinned,proto3" json:"is_pinned,omitempty"`
	// статистика
	Stats *Forum_Topic_Stats `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
	// последнее сообщение
	LastMessage          *Forum_LastMessage `protobuf:"bytes,8,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Forum_Topic) Reset()         { *m = Forum_Topic{} }
func (m *Forum_Topic) String() string { return proto.CompactTextString(m) }
func (*Forum_Topic) ProtoMessage()    {}
func (*Forum_Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9223c5c45cf6da7, []int{0, 3}
}

func (m *Forum_Topic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Forum_Topic.Unmarshal(m, b)
}
func (m *Forum_Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Forum_Topic.Marshal(b, m, deterministic)
}
func (m *Forum_Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forum_Topic.Merge(m, src)
}
func (m *Forum_Topic) XXX_Size() int {
	return xxx_messageInfo_Forum_Topic.Size(m)
}
func (m *Forum_Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Forum_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Forum_Topic proto.InternalMessageInfo

func (m *Forum_Topic) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Forum_Topic) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Forum_Topic) GetTopicType() Forum_Topic_Type {
	if m != nil {
		return m.TopicType
	}
	return Forum_Topic_UNKNOWN_TYPE
}

func (m *Forum_Topic) GetCreation() *Common_Creation {
	if m != nil {
		return m.Creation
	}
	return nil
}

func (m *Forum_Topic) GetIsClosed() bool {
	if m != nil {
		return m.IsClosed
	}
	return false
}

func (m *Forum_Topic) GetIsPinned() bool {
	if m != nil {
		return m.IsPinned
	}
	return false
}

func (m *Forum_Topic) GetStats() *Forum_Topic_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Forum_Topic) GetLastMessage() *Forum_LastMessage {
	if m != nil {
		return m.LastMessage
	}
	return nil
}

type Forum_Topic_Stats struct {
	// количество сообщений
	MessageCount uint64 `protobuf:"varint,1,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	// количество просмотров
	ViewCount            uint64   `protobuf:"varint,2,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Forum_Topic_Stats) Reset()         { *m = Forum_Topic_Stats{} }
func (m *Forum_Topic_Stats) String() string { return proto.CompactTextString(m) }
func (*Forum_Topic_Stats) ProtoMessage()    {}
func (*Forum_Topic_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9223c5c45cf6da7, []int{0, 3, 0}
}

func (m *Forum_Topic_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Forum_Topic_Stats.Unmarshal(m, b)
}
func (m *Forum_Topic_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Forum_Topic_Stats.Marshal(b, m, deterministic)
}
func (m *Forum_Topic_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forum_Topic_Stats.Merge(m, src)
}
func (m *Forum_Topic_Stats) XXX_Size() int {
	return xxx_messageInfo_Forum_Topic_Stats.Size(m)
}
func (m *Forum_Topic_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Forum_Topic_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Forum_Topic_Stats proto.InternalMessageInfo

func (m *Forum_Topic_Stats) GetMessageCount() uint64 {
	if m != nil {
		return m.MessageCount
	}
	return 0
}

func (m *Forum_Topic_Stats) GetViewCount() uint64 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

type Forum_Forum struct {
	// id форума
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// название
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// описание
	ForumDescription string `protobuf:"bytes,3,opt,name=forum_description,json=forumDescription,proto3" json:"forum_description,omitempty"`
	// модераторы
	Moderators []*Common_UserLink `protobuf:"bytes,4,rep,name=moderators,proto3" json:"moderators,omitempty"`
	// статистика
	Stats *Forum_Forum_Stats `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
	// последнее сообщение
	LastMessage          *Forum_LastMessage `protobuf:"bytes,6,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Forum_Forum) Reset()         { *m = Forum_Forum{} }
func (m *Forum_Forum) String() string { return proto.CompactTextString(m) }
func (*Forum_Forum) ProtoMessage()    {}
func (*Forum_Forum) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9223c5c45cf6da7, []int{0, 4}
}

func (m *Forum_Forum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Forum_Forum.Unmarshal(m, b)
}
func (m *Forum_Forum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Forum_Forum.Marshal(b, m, deterministic)
}
func (m *Forum_Forum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forum_Forum.Merge(m, src)
}
func (m *Forum_Forum) XXX_Size() int {
	return xxx_messageInfo_Forum_Forum.Size(m)
}
func (m *Forum_Forum) XXX_DiscardUnknown() {
	xxx_messageInfo_Forum_Forum.DiscardUnknown(m)
}

var xxx_messageInfo_Forum_Forum proto.InternalMessageInfo

func (m *Forum_Forum) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Forum_Forum) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Forum_Forum) GetForumDescription() string {
	if m != nil {
		return m.ForumDescription
	}
	return ""
}

func (m *Forum_Forum) GetModerators() []*Common_UserLink {
	if m != nil {
		return m.Moderators
	}
	return nil
}

func (m *Forum_Forum) GetStats() *Forum_Forum_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Forum_Forum) GetLastMessage() *Forum_LastMessage {
	if m != nil {
		return m.LastMessage
	}
	return nil
}

type Forum_Forum_Stats struct {
	// количество тем
	TopicCount uint64 `protobuf:"varint,1,opt,name=topic_count,json=topicCount,proto3" json:"topic_count,omitempty"`
	// количество сообщений
	MessageCount         uint64   `protobuf:"varint,2,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Forum_Forum_Stats) Reset()         { *m = Forum_Forum_Stats{} }
func (m *Forum_Forum_Stats) String() string { return proto.CompactTextString(m) }
func (*Forum_Forum_Stats) ProtoMessage()    {}
func (*Forum_Forum_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9223c5c45cf6da7, []int{0, 4, 0}
}

func (m *Forum_Forum_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Forum_Forum_Stats.Unmarshal(m, b)
}
func (m *Forum_Forum_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Forum_Forum_Stats.Marshal(b, m, deterministic)
}
func (m *Forum_Forum_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forum_Forum_Stats.Merge(m, src)
}
func (m *Forum_Forum_Stats) XXX_Size() int {
	return xxx_messageInfo_Forum_Forum_Stats.Size(m)
}
func (m *Forum_Forum_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Forum_Forum_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Forum_Forum_Stats proto.InternalMessageInfo

func (m *Forum_Forum_Stats) GetTopicCount() uint64 {
	if m != nil {
		return m.TopicCount
	}
	return 0
}

func (m *Forum_Forum_Stats) GetMessageCount() uint64 {
	if m != nil {
		return m.MessageCount
	}
	return 0
}

type Forum_ForumBlock struct {
	// id блока форумов
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// название
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// форумы
	Forums               []*Forum_Forum `protobuf:"bytes,3,rep,name=forums,proto3" json:"forums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Forum_ForumBlock) Reset()         { *m = Forum_ForumBlock{} }
func (m *Forum_ForumBlock) String() string { return proto.CompactTextString(m) }
func (*Forum_ForumBlock) ProtoMessage()    {}
func (*Forum_ForumBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9223c5c45cf6da7, []int{0, 5}
}

func (m *Forum_ForumBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Forum_ForumBlock.Unmarshal(m, b)
}
func (m *Forum_ForumBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Forum_ForumBlock.Marshal(b, m, deterministic)
}
func (m *Forum_ForumBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forum_ForumBlock.Merge(m, src)
}
func (m *Forum_ForumBlock) XXX_Size() int {
	return xxx_messageInfo_Forum_ForumBlock.Size(m)
}
func (m *Forum_ForumBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_Forum_ForumBlock.DiscardUnknown(m)
}

var xxx_messageInfo_Forum_ForumBlock proto.InternalMessageInfo

func (m *Forum_ForumBlock) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Forum_ForumBlock) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Forum_ForumBlock) GetForums() []*Forum_Forum {
	if m != nil {
		return m.Forums
	}
	return nil
}

type Forum_ForumBlocksResponse struct {
	// список блоков форумов
	ForumBlocks          []*Forum_ForumBlock `protobuf:"bytes,1,rep,name=forum_blocks,json=forumBlocks,proto3" json:"forum_blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Forum_ForumBlocksResponse) Reset()         { *m = Forum_ForumBlocksResponse{} }
func (m *Forum_ForumBlocksResponse) String() string { return proto.CompactTextString(m) }
func (*Forum_ForumBlocksResponse) ProtoMessage()    {}
func (*Forum_ForumBlocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9223c5c45cf6da7, []int{0, 6}
}

func (m *Forum_ForumBlocksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Forum_ForumBlocksResponse.Unmarshal(m, b)
}
func (m *Forum_ForumBlocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Forum_ForumBlocksResponse.Marshal(b, m, deterministic)
}
func (m *Forum_ForumBlocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forum_ForumBlocksResponse.Merge(m, src)
}
func (m *Forum_ForumBlocksResponse) XXX_Size() int {
	return xxx_messageInfo_Forum_ForumBlocksResponse.Size(m)
}
func (m *Forum_ForumBlocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Forum_ForumBlocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Forum_ForumBlocksResponse proto.InternalMessageInfo

func (m *Forum_ForumBlocksResponse) GetForumBlocks() []*Forum_ForumBlock {
	if m != nil {
		return m.ForumBlocks
	}
	return nil
}

type Forum_ForumTopicsResponse struct {
	// список тем
	Topics []*Forum_Topic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	// страницы
	Pages                *Common_Pages `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Forum_ForumTopicsResponse) Reset()         { *m = Forum_ForumTopicsResponse{} }
func (m *Forum_ForumTopicsResponse) String() string { return proto.CompactTextString(m) }
func (*Forum_ForumTopicsResponse) ProtoMessage()    {}
func (*Forum_ForumTopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9223c5c45cf6da7, []int{0, 7}
}

func (m *Forum_ForumTopicsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Forum_ForumTopicsResponse.Unmarshal(m, b)
}
func (m *Forum_ForumTopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Forum_ForumTopicsResponse.Marshal(b, m, deterministic)
}
func (m *Forum_ForumTopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forum_ForumTopicsResponse.Merge(m, src)
}
func (m *Forum_ForumTopicsResponse) XXX_Size() int {
	return xxx_messageInfo_Forum_ForumTopicsResponse.Size(m)
}
func (m *Forum_ForumTopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Forum_ForumTopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Forum_ForumTopicsResponse proto.InternalMessageInfo

func (m *Forum_ForumTopicsResponse) GetTopics() []*Forum_Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *Forum_ForumTopicsResponse) GetPages() *Common_Pages {
	if m != nil {
		return m.Pages
	}
	return nil
}

type Forum_ForumTopicResponse struct {
	// тема
	Topic *Forum_Topic `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// форум, в который входит тема
	Forum *Forum_Forum `protobuf:"bytes,2,opt,name=forum,proto3" json:"forum,omitempty"`
	// сообщения
	Messages []*Forum_TopicMessage `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	// страницы
	Pages                *Common_Pages `protobuf:"bytes,4,opt,name=pages,proto3" json:"pages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Forum_ForumTopicResponse) Reset()         { *m = Forum_ForumTopicResponse{} }
func (m *Forum_ForumTopicResponse) String() string { return proto.CompactTextString(m) }
func (*Forum_ForumTopicResponse) ProtoMessage()    {}
func (*Forum_ForumTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9223c5c45cf6da7, []int{0, 8}
}

func (m *Forum_ForumTopicResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Forum_ForumTopicResponse.Unmarshal(m, b)
}
func (m *Forum_ForumTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Forum_ForumTopicResponse.Marshal(b, m, deterministic)
}
func (m *Forum_ForumTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forum_ForumTopicResponse.Merge(m, src)
}
func (m *Forum_ForumTopicResponse) XXX_Size() int {
	return xxx_messageInfo_Forum_ForumTopicResponse.Size(m)
}
func (m *Forum_ForumTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Forum_ForumTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Forum_ForumTopicResponse proto.InternalMessageInfo

func (m *Forum_ForumTopicResponse) GetTopic() *Forum_Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Forum_ForumTopicResponse) GetForum() *Forum_Forum {
	if m != nil {
		return m.Forum
	}
	return nil
}

func (m *Forum_ForumTopicResponse) GetMessages() []*Forum_TopicMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *Forum_ForumTopicResponse) GetPages() *Common_Pages {
	if m != nil {
		return m.Pages
	}
	return nil
}

func init() {
	proto.RegisterEnum("Forum_Topic_Type", Forum_Topic_Type_name, Forum_Topic_Type_value)
	proto.RegisterType((*Forum)(nil), "Forum")
	proto.RegisterType((*Forum_TopicLink)(nil), "Forum.TopicLink")
	proto.RegisterType((*Forum_LastMessage)(nil), "Forum.LastMessage")
	proto.RegisterType((*Forum_TopicMessage)(nil), "Forum.TopicMessage")
	proto.RegisterType((*Forum_TopicMessage_Stats)(nil), "Forum.TopicMessage.Stats")
	proto.RegisterType((*Forum_Topic)(nil), "Forum.Topic")
	proto.RegisterType((*Forum_Topic_Stats)(nil), "Forum.Topic.Stats")
	proto.RegisterType((*Forum_Forum)(nil), "Forum.Forum")
	proto.RegisterType((*Forum_Forum_Stats)(nil), "Forum.Forum.Stats")
	proto.RegisterType((*Forum_ForumBlock)(nil), "Forum.ForumBlock")
	proto.RegisterType((*Forum_ForumBlocksResponse)(nil), "Forum.ForumBlocksResponse")
	proto.RegisterType((*Forum_ForumTopicsResponse)(nil), "Forum.ForumTopicsResponse")
	proto.RegisterType((*Forum_ForumTopicResponse)(nil), "Forum.ForumTopicResponse")
}

func init() { proto.RegisterFile("proto/forum.proto", fileDescriptor_f9223c5c45cf6da7) }

var fileDescriptor_f9223c5c45cf6da7 = []byte{
	// 748 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdd, 0x6e, 0xd3, 0x48,
	0x14, 0xc7, 0xd7, 0x89, 0x9d, 0x4d, 0x4e, 0xdc, 0x2a, 0x99, 0xae, 0x56, 0x5e, 0x2f, 0x28, 0x55,
	0x5a, 0xa1, 0x4a, 0x80, 0x0d, 0x05, 0x5e, 0xa0, 0x01, 0x24, 0xd4, 0xb4, 0x8d, 0x86, 0x54, 0x7c,
	0xdc, 0x04, 0xc7, 0x9e, 0x46, 0x16, 0x89, 0xc7, 0xf2, 0x4c, 0x0a, 0x7d, 0x1f, 0xee, 0x91, 0xb8,
	0xe6, 0x2d, 0x78, 0x07, 0x9e, 0x03, 0xf9, 0xcc, 0x38, 0x76, 0xd4, 0x16, 0x72, 0x13, 0xe5, 0x7c,
	0xff, 0xcf, 0x6f, 0xc6, 0x03, 0xdd, 0x34, 0xe3, 0x92, 0xfb, 0x17, 0x3c, 0x5b, 0x2e, 0x3c, 0xfc,
	0xef, 0x12, 0xe5, 0x0a, 0xf9, 0x62, 0xc1, 0x13, 0xed, 0xeb, 0xcd, 0x38, 0x9f, 0xcd, 0x99, 0x8f,
	0xd6, 0x74, 0x79, 0xe1, 0xcb, 0x78, 0xc1, 0x84, 0x0c, 0x16, 0xa9, 0x4a, 0xe8, 0xff, 0xb4, 0xc1,
	0x7a, 0x99, 0x37, 0x71, 0x1f, 0x43, 0x6b, 0xcc, 0xd3, 0x38, 0x1c, 0xc6, 0xc9, 0x47, 0xb2, 0x0d,
	0xb5, 0x38, 0x72, 0x8c, 0x5d, 0xe3, 0xc0, 0xa4, 0xb5, 0x38, 0x22, 0xff, 0x80, 0x25, 0x63, 0x39,
	0x67, 0x4e, 0x6d, 0xd7, 0x38, 0x68, 0x51, 0x65, 0xb8, 0x5f, 0x0d, 0x68, 0x0f, 0x03, 0x21, 0x4f,
	0x98, 0x10, 0xc1, 0x8c, 0x5d, 0xab, 0xba, 0x07, 0x96, 0xcc, 0x5b, 0x62, 0x55, 0xfb, 0xb0, 0xe3,
	0xe1, 0x24, 0x6f, 0x35, 0x86, 0xaa, 0x30, 0xd9, 0x07, 0x73, 0x29, 0x58, 0xe6, 0xd4, 0x75, 0xda,
	0x40, 0xad, 0x70, 0x2e, 0x58, 0x86, 0x69, 0x18, 0x25, 0x04, 0x4c, 0xc9, 0x3e, 0x4b, 0xc7, 0x44,
	0x09, 0xf8, 0x9f, 0x78, 0x60, 0x46, 0x81, 0x64, 0x8e, 0x85, 0x95, 0xae, 0xa7, 0xd6, 0xf5, 0x8a,
	0x75, 0xbd, 0x71, 0xb1, 0x2e, 0xc5, 0x3c, 0xf7, 0x87, 0x01, 0x36, 0x8e, 0xbf, 0x4d, 0xf2, 0x03,
	0x68, 0x86, 0x19, 0x0b, 0x64, 0xcc, 0x93, 0x95, 0x6a, 0x2d, 0x67, 0xa0, 0xfd, 0x74, 0x95, 0xb1,
	0x92, 0x54, 0xaf, 0x48, 0xea, 0x41, 0x3b, 0x16, 0x93, 0x90, 0x25, 0x82, 0x67, 0x2c, 0x42, 0xb5,
	0x4d, 0x0a, 0xb1, 0x18, 0x68, 0x0f, 0xf1, 0xc1, 0x12, 0x32, 0x90, 0x42, 0x8b, 0xfe, 0xaf, 0x4a,
	0x45, 0xcb, 0xf2, 0x5e, 0xe7, 0x09, 0x54, 0xe5, 0xb9, 0x3d, 0xb0, 0xd0, 0x26, 0xff, 0x42, 0x23,
	0x0b, 0x64, 0x9c, 0xcc, 0x50, 0x70, 0x9d, 0x6a, 0xcb, 0xfd, 0x52, 0x07, 0x0b, 0xcb, 0x37, 0x3b,
	0x37, 0xf2, 0x08, 0x00, 0xc1, 0x4f, 0xe4, 0x55, 0xca, 0x50, 0xfc, 0xf6, 0x61, 0xb7, 0x2a, 0xc3,
	0x1b, 0x5f, 0xa5, 0x8c, 0xb6, 0x30, 0x29, 0xff, 0xbb, 0x86, 0xc5, 0xfc, 0x23, 0x96, 0xff, 0xa1,
	0x95, 0x23, 0x98, 0x73, 0xc1, 0x22, 0xdc, 0xb2, 0x49, 0x9b, 0xb1, 0x18, 0xa0, 0xad, 0x83, 0x69,
	0x9c, 0x24, 0x2c, 0x72, 0x1a, 0x45, 0x70, 0x84, 0x36, 0x39, 0x28, 0xd8, 0xfc, 0x8d, 0x43, 0xc8,
	0x9a, 0xa8, 0x2a, 0x14, 0xf2, 0x0c, 0xec, 0x79, 0x20, 0xe4, 0x64, 0xa1, 0x88, 0x39, 0xcd, 0xb5,
	0x82, 0xca, 0xad, 0xa4, 0xed, 0x79, 0x69, 0xb8, 0xc7, 0x05, 0xcb, 0x3d, 0xd8, 0xd2, 0xa5, 0x93,
	0x90, 0x2f, 0x13, 0xa9, 0xa1, 0xd9, 0xda, 0x39, 0xc8, 0x7d, 0xe4, 0x2e, 0xc0, 0x65, 0xcc, 0x3e,
	0xe9, 0x8c, 0x1a, 0x66, 0xb4, 0x72, 0x0f, 0x86, 0xfb, 0x0f, 0xc1, 0x44, 0x3a, 0x1d, 0xb0, 0xcf,
	0x4f, 0x8f, 0x4f, 0xcf, 0xde, 0x9c, 0x4e, 0xc6, 0xef, 0x46, 0x2f, 0x3a, 0x7f, 0x91, 0x16, 0x58,
	0xe3, 0xb3, 0xd1, 0xab, 0x41, 0xc7, 0x20, 0x4d, 0x30, 0x47, 0x67, 0xc3, 0x61, 0xa7, 0xe6, 0x7e,
	0xaf, 0xe9, 0x6f, 0x6d, 0xc3, 0x63, 0xba, 0x0f, 0x5d, 0xfc, 0xbe, 0x27, 0x11, 0x13, 0x61, 0x16,
	0xa7, 0x48, 0x5f, 0x5d, 0xb5, 0x0e, 0x06, 0x9e, 0x97, 0xfe, 0xfc, 0x4c, 0x17, 0x3c, 0x62, 0x59,
	0x20, 0x79, 0x26, 0x1c, 0x73, 0xb7, 0x7e, 0xe3, 0x97, 0x54, 0xc9, 0x29, 0x59, 0x5b, 0x6b, 0xe8,
	0xd4, 0xef, 0x6f, 0x59, 0x37, 0x36, 0x63, 0x7d, 0x52, 0xb0, 0xee, 0x41, 0x5b, 0xdd, 0xb7, 0x2a,
	0x69, 0x75, 0x05, 0x15, 0xe7, 0x6b, 0x87, 0x51, 0xbb, 0x7e, 0x18, 0xee, 0x5b, 0x00, 0x1c, 0x78,
	0x34, 0xe7, 0xe1, 0x86, 0x2f, 0x14, 0xd9, 0x87, 0x06, 0x92, 0x12, 0x4e, 0x1d, 0x89, 0xd8, 0xd5,
	0x25, 0xa9, 0x8e, 0xb9, 0xc7, 0xb0, 0x53, 0x76, 0x16, 0x94, 0x89, 0x94, 0x27, 0x82, 0x91, 0xa7,
	0x60, 0x2b, 0xfe, 0x53, 0xf4, 0x3b, 0x06, 0xb6, 0xe8, 0x56, 0x5b, 0x60, 0x05, 0x6d, 0x5f, 0x94,
	0xd5, 0xee, 0x07, 0xdd, 0x0c, 0xef, 0x6c, 0xd9, 0x6c, 0x1f, 0x1a, 0xb8, 0x70, 0xd1, 0xc6, 0xae,
	0x5e, 0x6d, 0xaa, 0x63, 0x64, 0x0f, 0xac, 0x34, 0x98, 0x31, 0xa1, 0xdf, 0x9e, 0xad, 0xe2, 0x00,
	0x47, 0xb9, 0x93, 0xaa, 0x98, 0xfb, 0xcd, 0x00, 0x52, 0x8e, 0x58, 0x4d, 0xe8, 0x17, 0xaf, 0xad,
	0x81, 0xb5, 0xeb, 0x03, 0xf4, 0x4b, 0xdb, 0x07, 0x0b, 0xb5, 0xea, 0xfe, 0xeb, 0x38, 0x54, 0x88,
	0xf8, 0xd0, 0xd4, 0xdc, 0x0b, 0x6a, 0x3b, 0x37, 0x3c, 0x51, 0x74, 0x95, 0x54, 0x8a, 0x36, 0x6f,
	0x17, 0x7d, 0x74, 0xe7, 0xbd, 0x2b, 0xf8, 0x32, 0x0b, 0x99, 0xf0, 0x05, 0xcb, 0x2e, 0x59, 0xe6,
	0xc7, 0x89, 0x64, 0x59, 0x12, 0xcc, 0xfd, 0x74, 0x3a, 0x6d, 0xe0, 0x8b, 0xfd, 0xe4, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x8a, 0xcc, 0x9b, 0x88, 0xd7, 0x06, 0x00, 0x00,
}
