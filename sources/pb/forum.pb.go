// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1-devel
// 	protoc        v3.11.4
// source: proto/forum.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Forum_Topic_Type int32

const (
	Forum_Topic_UNKNOWN_TYPE Forum_Topic_Type = 0
	// тема
	Forum_Topic_TOPIC Forum_Topic_Type = 1
	// опрос
	Forum_Topic_POLL Forum_Topic_Type = 2
)

// Enum value maps for Forum_Topic_Type.
var (
	Forum_Topic_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "TOPIC",
		2: "POLL",
	}
	Forum_Topic_Type_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"TOPIC":        1,
		"POLL":         2,
	}
)

func (x Forum_Topic_Type) Enum() *Forum_Topic_Type {
	p := new(Forum_Topic_Type)
	*p = x
	return p
}

func (x Forum_Topic_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Forum_Topic_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_forum_proto_enumTypes[0].Descriptor()
}

func (Forum_Topic_Type) Type() protoreflect.EnumType {
	return &file_proto_forum_proto_enumTypes[0]
}

func (x Forum_Topic_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Forum_Topic_Type.Descriptor instead.
func (Forum_Topic_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_forum_proto_rawDescGZIP(), []int{0, 3, 0}
}

type Forum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Forum) Reset() {
	*x = Forum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forum_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forum) ProtoMessage() {}

func (x *Forum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forum_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forum.ProtoReflect.Descriptor instead.
func (*Forum) Descriptor() ([]byte, []int) {
	return file_proto_forum_proto_rawDescGZIP(), []int{0}
}

type Forum_TopicLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id темы
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// название
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Forum_TopicLink) Reset() {
	*x = Forum_TopicLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forum_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forum_TopicLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forum_TopicLink) ProtoMessage() {}

func (x *Forum_TopicLink) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forum_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forum_TopicLink.ProtoReflect.Descriptor instead.
func (*Forum_TopicLink) Descriptor() ([]byte, []int) {
	return file_proto_forum_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Forum_TopicLink) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Forum_TopicLink) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type Forum_LastMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id сообщения
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// тема, в которую входит сообщение
	Topic *Forum_TopicLink `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// автор
	User *Common_UserLink `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// текст
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// дата и время создания
	Date *timestamp.Timestamp `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *Forum_LastMessage) Reset() {
	*x = Forum_LastMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forum_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forum_LastMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forum_LastMessage) ProtoMessage() {}

func (x *Forum_LastMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forum_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forum_LastMessage.ProtoReflect.Descriptor instead.
func (*Forum_LastMessage) Descriptor() ([]byte, []int) {
	return file_proto_forum_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Forum_LastMessage) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Forum_LastMessage) GetTopic() *Forum_TopicLink {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *Forum_LastMessage) GetUser() *Common_UserLink {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Forum_LastMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Forum_LastMessage) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type Forum_TopicMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id сообщения
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// данные о создании
	Creation *Common_Creation `protobuf:"bytes,2,opt,name=creation,proto3" json:"creation,omitempty"`
	// текст
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// текст изъят модератором?
	IsCensored bool `protobuf:"varint,4,opt,name=is_censored,json=isCensored,proto3" json:"is_censored,omitempty"`
	// статистика
	Stats *Forum_TopicMessage_Stats `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *Forum_TopicMessage) Reset() {
	*x = Forum_TopicMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forum_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forum_TopicMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forum_TopicMessage) ProtoMessage() {}

func (x *Forum_TopicMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forum_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forum_TopicMessage.ProtoReflect.Descriptor instead.
func (*Forum_TopicMessage) Descriptor() ([]byte, []int) {
	return file_proto_forum_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Forum_TopicMessage) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Forum_TopicMessage) GetCreation() *Common_Creation {
	if x != nil {
		return x.Creation
	}
	return nil
}

func (x *Forum_TopicMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Forum_TopicMessage) GetIsCensored() bool {
	if x != nil {
		return x.IsCensored
	}
	return false
}

func (x *Forum_TopicMessage) GetStats() *Forum_TopicMessage_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type Forum_Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id темы
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// название
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// тип
	TopicType Forum_Topic_Type `protobuf:"varint,3,opt,name=topic_type,json=topicType,proto3,enum=Forum_Topic_Type" json:"topic_type,omitempty"`
	// данные о создании
	Creation *Common_Creation `protobuf:"bytes,4,opt,name=creation,proto3" json:"creation,omitempty"`
	// тема закрыта?
	IsClosed bool `protobuf:"varint,5,opt,name=is_closed,json=isClosed,proto3" json:"is_closed,omitempty"`
	// тема закреплена?
	IsPinned bool `protobuf:"varint,6,opt,name=is_pinned,json=isPinned,proto3" json:"is_pinned,omitempty"`
	// статистика
	Stats *Forum_Topic_Stats `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
	// последнее сообщение
	LastMessage *Forum_LastMessage `protobuf:"bytes,8,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
}

func (x *Forum_Topic) Reset() {
	*x = Forum_Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forum_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forum_Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forum_Topic) ProtoMessage() {}

func (x *Forum_Topic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forum_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forum_Topic.ProtoReflect.Descriptor instead.
func (*Forum_Topic) Descriptor() ([]byte, []int) {
	return file_proto_forum_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Forum_Topic) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Forum_Topic) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Forum_Topic) GetTopicType() Forum_Topic_Type {
	if x != nil {
		return x.TopicType
	}
	return Forum_Topic_UNKNOWN_TYPE
}

func (x *Forum_Topic) GetCreation() *Common_Creation {
	if x != nil {
		return x.Creation
	}
	return nil
}

func (x *Forum_Topic) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

func (x *Forum_Topic) GetIsPinned() bool {
	if x != nil {
		return x.IsPinned
	}
	return false
}

func (x *Forum_Topic) GetStats() *Forum_Topic_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Forum_Topic) GetLastMessage() *Forum_LastMessage {
	if x != nil {
		return x.LastMessage
	}
	return nil
}

type Forum_Forum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id форума
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// название
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// описание
	ForumDescription string `protobuf:"bytes,3,opt,name=forum_description,json=forumDescription,proto3" json:"forum_description,omitempty"`
	// модераторы
	Moderators []*Common_UserLink `protobuf:"bytes,4,rep,name=moderators,proto3" json:"moderators,omitempty"`
	// статистика
	Stats *Forum_Forum_Stats `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
	// последнее сообщение
	LastMessage *Forum_LastMessage `protobuf:"bytes,6,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
}

func (x *Forum_Forum) Reset() {
	*x = Forum_Forum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forum_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forum_Forum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forum_Forum) ProtoMessage() {}

func (x *Forum_Forum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forum_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forum_Forum.ProtoReflect.Descriptor instead.
func (*Forum_Forum) Descriptor() ([]byte, []int) {
	return file_proto_forum_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Forum_Forum) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Forum_Forum) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Forum_Forum) GetForumDescription() string {
	if x != nil {
		return x.ForumDescription
	}
	return ""
}

func (x *Forum_Forum) GetModerators() []*Common_UserLink {
	if x != nil {
		return x.Moderators
	}
	return nil
}

func (x *Forum_Forum) GetStats() *Forum_Forum_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Forum_Forum) GetLastMessage() *Forum_LastMessage {
	if x != nil {
		return x.LastMessage
	}
	return nil
}

type Forum_ForumBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id блока форумов
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// название
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// форумы
	Forums []*Forum_Forum `protobuf:"bytes,3,rep,name=forums,proto3" json:"forums,omitempty"`
}

func (x *Forum_ForumBlock) Reset() {
	*x = Forum_ForumBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forum_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forum_ForumBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forum_ForumBlock) ProtoMessage() {}

func (x *Forum_ForumBlock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forum_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forum_ForumBlock.ProtoReflect.Descriptor instead.
func (*Forum_ForumBlock) Descriptor() ([]byte, []int) {
	return file_proto_forum_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Forum_ForumBlock) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Forum_ForumBlock) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Forum_ForumBlock) GetForums() []*Forum_Forum {
	if x != nil {
		return x.Forums
	}
	return nil
}

type Forum_ForumBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// список блоков форумов
	ForumBlocks []*Forum_ForumBlock `protobuf:"bytes,1,rep,name=forum_blocks,json=forumBlocks,proto3" json:"forum_blocks,omitempty"`
}

func (x *Forum_ForumBlocksResponse) Reset() {
	*x = Forum_ForumBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forum_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forum_ForumBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forum_ForumBlocksResponse) ProtoMessage() {}

func (x *Forum_ForumBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forum_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forum_ForumBlocksResponse.ProtoReflect.Descriptor instead.
func (*Forum_ForumBlocksResponse) Descriptor() ([]byte, []int) {
	return file_proto_forum_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Forum_ForumBlocksResponse) GetForumBlocks() []*Forum_ForumBlock {
	if x != nil {
		return x.ForumBlocks
	}
	return nil
}

type Forum_ForumTopicsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// список тем
	Topics []*Forum_Topic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	// страницы
	Pages *Common_Pages `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
}

func (x *Forum_ForumTopicsResponse) Reset() {
	*x = Forum_ForumTopicsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forum_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forum_ForumTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forum_ForumTopicsResponse) ProtoMessage() {}

func (x *Forum_ForumTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forum_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forum_ForumTopicsResponse.ProtoReflect.Descriptor instead.
func (*Forum_ForumTopicsResponse) Descriptor() ([]byte, []int) {
	return file_proto_forum_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Forum_ForumTopicsResponse) GetTopics() []*Forum_Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Forum_ForumTopicsResponse) GetPages() *Common_Pages {
	if x != nil {
		return x.Pages
	}
	return nil
}

type Forum_ForumTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// тема
	Topic *Forum_Topic `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// форум, в который входит тема
	Forum *Forum_Forum `protobuf:"bytes,2,opt,name=forum,proto3" json:"forum,omitempty"`
	// закрепленное сообщение, если есть
	PinnedMessage *Forum_TopicMessage `protobuf:"bytes,3,opt,name=pinned_message,json=pinnedMessage,proto3" json:"pinned_message,omitempty"`
	// сообщения
	Messages []*Forum_TopicMessage `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
	// страницы
	Pages *Common_Pages `protobuf:"bytes,5,opt,name=pages,proto3" json:"pages,omitempty"`
}

func (x *Forum_ForumTopicResponse) Reset() {
	*x = Forum_ForumTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forum_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forum_ForumTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forum_ForumTopicResponse) ProtoMessage() {}

func (x *Forum_ForumTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forum_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forum_ForumTopicResponse.ProtoReflect.Descriptor instead.
func (*Forum_ForumTopicResponse) Descriptor() ([]byte, []int) {
	return file_proto_forum_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Forum_ForumTopicResponse) GetTopic() *Forum_Topic {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *Forum_ForumTopicResponse) GetForum() *Forum_Forum {
	if x != nil {
		return x.Forum
	}
	return nil
}

func (x *Forum_ForumTopicResponse) GetPinnedMessage() *Forum_TopicMessage {
	if x != nil {
		return x.PinnedMessage
	}
	return nil
}

func (x *Forum_ForumTopicResponse) GetMessages() []*Forum_TopicMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Forum_ForumTopicResponse) GetPages() *Common_Pages {
	if x != nil {
		return x.Pages
	}
	return nil
}

type Forum_TopicMessage_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// рейтинг
	Rating int64 `protobuf:"varint,1,opt,name=rating,proto3" json:"rating,omitempty"`
}

func (x *Forum_TopicMessage_Stats) Reset() {
	*x = Forum_TopicMessage_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forum_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forum_TopicMessage_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forum_TopicMessage_Stats) ProtoMessage() {}

func (x *Forum_TopicMessage_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forum_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forum_TopicMessage_Stats.ProtoReflect.Descriptor instead.
func (*Forum_TopicMessage_Stats) Descriptor() ([]byte, []int) {
	return file_proto_forum_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Forum_TopicMessage_Stats) GetRating() int64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

type Forum_Topic_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// количество сообщений
	MessageCount uint64 `protobuf:"varint,1,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	// количество просмотров
	ViewCount uint64 `protobuf:"varint,2,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
}

func (x *Forum_Topic_Stats) Reset() {
	*x = Forum_Topic_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forum_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forum_Topic_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forum_Topic_Stats) ProtoMessage() {}

func (x *Forum_Topic_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forum_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forum_Topic_Stats.ProtoReflect.Descriptor instead.
func (*Forum_Topic_Stats) Descriptor() ([]byte, []int) {
	return file_proto_forum_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Forum_Topic_Stats) GetMessageCount() uint64 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *Forum_Topic_Stats) GetViewCount() uint64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

type Forum_Forum_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// количество тем
	TopicCount uint64 `protobuf:"varint,1,opt,name=topic_count,json=topicCount,proto3" json:"topic_count,omitempty"`
	// количество сообщений
	MessageCount uint64 `protobuf:"varint,2,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
}

func (x *Forum_Forum_Stats) Reset() {
	*x = Forum_Forum_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forum_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forum_Forum_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forum_Forum_Stats) ProtoMessage() {}

func (x *Forum_Forum_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forum_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forum_Forum_Stats.ProtoReflect.Descriptor instead.
func (*Forum_Forum_Stats) Descriptor() ([]byte, []int) {
	return file_proto_forum_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Forum_Forum_Stats) GetTopicCount() uint64 {
	if x != nil {
		return x.TopicCount
	}
	return 0
}

func (x *Forum_Forum_Stats) GetMessageCount() uint64 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

var File_proto_forum_proto protoreflect.FileDescriptor

var file_proto_forum_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x0d, 0x0a, 0x05, 0x46, 0x6f, 0x72,
	0x75, 0x6d, 0x1a, 0x31, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0xaf, 0x01, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x24, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x1a, 0xd3, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x1f, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0xa4, 0x03,
	0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a,
	0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x35, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x4c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x4b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f,
	0x4c, 0x4c, 0x10, 0x02, 0x1a, 0xbc, 0x02, 0x0a, 0x05, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x35, 0x0a,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x4c, 0x61, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x4d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x58, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x46, 0x6f, 0x72, 0x75, 0x6d, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x1a, 0x4b, 0x0a,
	0x13, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x60, 0x0a, 0x13, 0x46, 0x6f,
	0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x1a, 0xee, 0x01, 0x0a,
	0x12, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x46,
	0x6f, 0x72, 0x75, 0x6d, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x0e, 0x70,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x42, 0x0c, 0x5a,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_forum_proto_rawDescOnce sync.Once
	file_proto_forum_proto_rawDescData = file_proto_forum_proto_rawDesc
)

func file_proto_forum_proto_rawDescGZIP() []byte {
	file_proto_forum_proto_rawDescOnce.Do(func() {
		file_proto_forum_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_forum_proto_rawDescData)
	})
	return file_proto_forum_proto_rawDescData
}

var file_proto_forum_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_forum_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_forum_proto_goTypes = []interface{}{
	(Forum_Topic_Type)(0),             // 0: Forum.Topic.Type
	(*Forum)(nil),                     // 1: Forum
	(*Forum_TopicLink)(nil),           // 2: Forum.TopicLink
	(*Forum_LastMessage)(nil),         // 3: Forum.LastMessage
	(*Forum_TopicMessage)(nil),        // 4: Forum.TopicMessage
	(*Forum_Topic)(nil),               // 5: Forum.Topic
	(*Forum_Forum)(nil),               // 6: Forum.Forum
	(*Forum_ForumBlock)(nil),          // 7: Forum.ForumBlock
	(*Forum_ForumBlocksResponse)(nil), // 8: Forum.ForumBlocksResponse
	(*Forum_ForumTopicsResponse)(nil), // 9: Forum.ForumTopicsResponse
	(*Forum_ForumTopicResponse)(nil),  // 10: Forum.ForumTopicResponse
	(*Forum_TopicMessage_Stats)(nil),  // 11: Forum.TopicMessage.Stats
	(*Forum_Topic_Stats)(nil),         // 12: Forum.Topic.Stats
	(*Forum_Forum_Stats)(nil),         // 13: Forum.Forum.Stats
	(*Common_UserLink)(nil),           // 14: Common.UserLink
	(*timestamp.Timestamp)(nil),       // 15: google.protobuf.Timestamp
	(*Common_Creation)(nil),           // 16: Common.Creation
	(*Common_Pages)(nil),              // 17: Common.Pages
}
var file_proto_forum_proto_depIdxs = []int32{
	2,  // 0: Forum.LastMessage.topic:type_name -> Forum.TopicLink
	14, // 1: Forum.LastMessage.user:type_name -> Common.UserLink
	15, // 2: Forum.LastMessage.date:type_name -> google.protobuf.Timestamp
	16, // 3: Forum.TopicMessage.creation:type_name -> Common.Creation
	11, // 4: Forum.TopicMessage.stats:type_name -> Forum.TopicMessage.Stats
	0,  // 5: Forum.Topic.topic_type:type_name -> Forum.Topic.Type
	16, // 6: Forum.Topic.creation:type_name -> Common.Creation
	12, // 7: Forum.Topic.stats:type_name -> Forum.Topic.Stats
	3,  // 8: Forum.Topic.last_message:type_name -> Forum.LastMessage
	14, // 9: Forum.Forum.moderators:type_name -> Common.UserLink
	13, // 10: Forum.Forum.stats:type_name -> Forum.Forum.Stats
	3,  // 11: Forum.Forum.last_message:type_name -> Forum.LastMessage
	6,  // 12: Forum.ForumBlock.forums:type_name -> Forum.Forum
	7,  // 13: Forum.ForumBlocksResponse.forum_blocks:type_name -> Forum.ForumBlock
	5,  // 14: Forum.ForumTopicsResponse.topics:type_name -> Forum.Topic
	17, // 15: Forum.ForumTopicsResponse.pages:type_name -> Common.Pages
	5,  // 16: Forum.ForumTopicResponse.topic:type_name -> Forum.Topic
	6,  // 17: Forum.ForumTopicResponse.forum:type_name -> Forum.Forum
	4,  // 18: Forum.ForumTopicResponse.pinned_message:type_name -> Forum.TopicMessage
	4,  // 19: Forum.ForumTopicResponse.messages:type_name -> Forum.TopicMessage
	17, // 20: Forum.ForumTopicResponse.pages:type_name -> Common.Pages
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_proto_forum_proto_init() }
func file_proto_forum_proto_init() {
	if File_proto_forum_proto != nil {
		return
	}
	file_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_forum_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forum_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forum_TopicLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forum_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forum_LastMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forum_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forum_TopicMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forum_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forum_Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forum_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forum_Forum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forum_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forum_ForumBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forum_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forum_ForumBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forum_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forum_ForumTopicsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forum_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forum_ForumTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forum_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forum_TopicMessage_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forum_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forum_Topic_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forum_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forum_Forum_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_forum_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_forum_proto_goTypes,
		DependencyIndexes: file_proto_forum_proto_depIdxs,
		EnumInfos:         file_proto_forum_proto_enumTypes,
		MessageInfos:      file_proto_forum_proto_msgTypes,
	}.Build()
	File_proto_forum_proto = out.File
	file_proto_forum_proto_rawDesc = nil
	file_proto_forum_proto_goTypes = nil
	file_proto_forum_proto_depIdxs = nil
}
