// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/work.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Work_WorkType int32

const (
	Work_WORK_TYPE_UNKNOWN Work_WorkType = 0
	// Роман
	Work_WORK_TYPE_NOVEL Work_WorkType = 1
	// Сборник
	Work_WORK_TYPE_COLLECTION Work_WorkType = 2
	// Цикл
	Work_WORK_TYPE_CYCLE Work_WorkType = 3
	// Стихотворение
	Work_WORK_TYPE_POEM Work_WorkType = 4
	// Произведение (прочее)
	Work_WORK_TYPE_OTHER Work_WorkType = 5
	// Сказка
	Work_WORK_TYPE_TALE Work_WorkType = 6
	// Эссе
	Work_WORK_TYPE_ESSAY Work_WorkType = 7
	// Статья
	Work_WORK_TYPE_ARTICLE Work_WorkType = 8
	// Роман-эпопея
	Work_WORK_TYPE_EPIC Work_WorkType = 9
	// Антология
	Work_WORK_TYPE_ANTOLOGY Work_WorkType = 10
	// Пьеса
	Work_WORK_TYPE_PIECE Work_WorkType = 11
	// Киносценарий
	Work_WORK_TYPE_SCENARIO Work_WorkType = 12
	// Документальное произведение
	Work_WORK_TYPE_DOCUMENTAL Work_WorkType = 13
	// Микрорассказ
	Work_WORK_TYPE_MICROSTORY Work_WorkType = 14
	// Диссертация
	Work_WORK_TYPE_DISSER Work_WorkType = 15
	// Монография
	Work_WORK_TYPE_MONOGRAPHY Work_WorkType = 16
	// Учебное издание
	Work_WORK_TYPE_STUDY Work_WorkType = 17
	// Энциклопедия/справочник
	Work_WORK_TYPE_ENCYCLOPEDY Work_WorkType = 18
	// Журнал
	Work_WORK_TYPE_MAGAZINE Work_WorkType = 19
	// Комикс
	Work_WORK_TYPE_COMIX Work_WorkType = 20
	// Манга
	Work_WORK_TYPE_MANGA Work_WorkType = 21
	// Графический роман
	Work_WORK_TYPE_GRAPHICNOVEL Work_WorkType = 22
	// Повесть
	Work_WORK_TYPE_STORY Work_WorkType = 23
	// Рассказ
	Work_WORK_TYPE_SHORTSTORY Work_WorkType = 24
	// Очерк
	Work_WORK_TYPE_SKETCH Work_WorkType = 25
	// Репортаж
	Work_WORK_TYPE_REPORTAGE Work_WorkType = 26
	// Условный цикл
	Work_WORK_TYPE_CONDITIONALCYCLE Work_WorkType = 27
	// Отрывок
	Work_WORK_TYPE_EXCERPT Work_WorkType = 28
	// Интервью
	Work_WORK_TYPE_INTERVIEW Work_WorkType = 29
	// Рецензия
	Work_WORK_TYPE_REVIEW Work_WorkType = 30
)

var Work_WorkType_name = map[int32]string{
	0:  "WORK_TYPE_UNKNOWN",
	1:  "WORK_TYPE_NOVEL",
	2:  "WORK_TYPE_COLLECTION",
	3:  "WORK_TYPE_CYCLE",
	4:  "WORK_TYPE_POEM",
	5:  "WORK_TYPE_OTHER",
	6:  "WORK_TYPE_TALE",
	7:  "WORK_TYPE_ESSAY",
	8:  "WORK_TYPE_ARTICLE",
	9:  "WORK_TYPE_EPIC",
	10: "WORK_TYPE_ANTOLOGY",
	11: "WORK_TYPE_PIECE",
	12: "WORK_TYPE_SCENARIO",
	13: "WORK_TYPE_DOCUMENTAL",
	14: "WORK_TYPE_MICROSTORY",
	15: "WORK_TYPE_DISSER",
	16: "WORK_TYPE_MONOGRAPHY",
	17: "WORK_TYPE_STUDY",
	18: "WORK_TYPE_ENCYCLOPEDY",
	19: "WORK_TYPE_MAGAZINE",
	20: "WORK_TYPE_COMIX",
	21: "WORK_TYPE_MANGA",
	22: "WORK_TYPE_GRAPHICNOVEL",
	23: "WORK_TYPE_STORY",
	24: "WORK_TYPE_SHORTSTORY",
	25: "WORK_TYPE_SKETCH",
	26: "WORK_TYPE_REPORTAGE",
	27: "WORK_TYPE_CONDITIONALCYCLE",
	28: "WORK_TYPE_EXCERPT",
	29: "WORK_TYPE_INTERVIEW",
	30: "WORK_TYPE_REVIEW",
}

var Work_WorkType_value = map[string]int32{
	"WORK_TYPE_UNKNOWN":          0,
	"WORK_TYPE_NOVEL":            1,
	"WORK_TYPE_COLLECTION":       2,
	"WORK_TYPE_CYCLE":            3,
	"WORK_TYPE_POEM":             4,
	"WORK_TYPE_OTHER":            5,
	"WORK_TYPE_TALE":             6,
	"WORK_TYPE_ESSAY":            7,
	"WORK_TYPE_ARTICLE":          8,
	"WORK_TYPE_EPIC":             9,
	"WORK_TYPE_ANTOLOGY":         10,
	"WORK_TYPE_PIECE":            11,
	"WORK_TYPE_SCENARIO":         12,
	"WORK_TYPE_DOCUMENTAL":       13,
	"WORK_TYPE_MICROSTORY":       14,
	"WORK_TYPE_DISSER":           15,
	"WORK_TYPE_MONOGRAPHY":       16,
	"WORK_TYPE_STUDY":            17,
	"WORK_TYPE_ENCYCLOPEDY":      18,
	"WORK_TYPE_MAGAZINE":         19,
	"WORK_TYPE_COMIX":            20,
	"WORK_TYPE_MANGA":            21,
	"WORK_TYPE_GRAPHICNOVEL":     22,
	"WORK_TYPE_STORY":            23,
	"WORK_TYPE_SHORTSTORY":       24,
	"WORK_TYPE_SKETCH":           25,
	"WORK_TYPE_REPORTAGE":        26,
	"WORK_TYPE_CONDITIONALCYCLE": 27,
	"WORK_TYPE_EXCERPT":          28,
	"WORK_TYPE_INTERVIEW":        29,
	"WORK_TYPE_REVIEW":           30,
}

func (x Work_WorkType) String() string {
	return proto.EnumName(Work_WorkType_name, int32(x))
}

func (Work_WorkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9cf60e12930bf818, []int{0, 0}
}

type Work_PublishStatus int32

const (
	Work_PUBLISH_STATUS_UNKNOWN Work_PublishStatus = 0
	// Не закончено
	Work_PUBLISH_STATUS_NOT_FINISHED Work_PublishStatus = 1
	// Не опубликовано
	Work_PUBLISH_STATUS_NOT_PUBLISHED Work_PublishStatus = 2
	// Сетевая публикация
	Work_PUBLISH_STATUS_NETWORK_PUBLICATION Work_PublishStatus = 3
	// Доступно в сети
	Work_PUBLISH_STATUS_AVAILABLE_ONLINE Work_PublishStatus = 4
	// В планах автора
	Work_PUBLISH_STATUS_PLANNED_BY_THE_AUTHOR Work_PublishStatus = 5
	// Опубликовано
	Work_PUBLISH_STATUS_PUBLISHED Work_PublishStatus = 6
)

var Work_PublishStatus_name = map[int32]string{
	0: "PUBLISH_STATUS_UNKNOWN",
	1: "PUBLISH_STATUS_NOT_FINISHED",
	2: "PUBLISH_STATUS_NOT_PUBLISHED",
	3: "PUBLISH_STATUS_NETWORK_PUBLICATION",
	4: "PUBLISH_STATUS_AVAILABLE_ONLINE",
	5: "PUBLISH_STATUS_PLANNED_BY_THE_AUTHOR",
	6: "PUBLISH_STATUS_PUBLISHED",
}

var Work_PublishStatus_value = map[string]int32{
	"PUBLISH_STATUS_UNKNOWN":               0,
	"PUBLISH_STATUS_NOT_FINISHED":          1,
	"PUBLISH_STATUS_NOT_PUBLISHED":         2,
	"PUBLISH_STATUS_NETWORK_PUBLICATION":   3,
	"PUBLISH_STATUS_AVAILABLE_ONLINE":      4,
	"PUBLISH_STATUS_PLANNED_BY_THE_AUTHOR": 5,
	"PUBLISH_STATUS_PUBLISHED":             6,
}

func (x Work_PublishStatus) String() string {
	return proto.EnumName(Work_PublishStatus_name, int32(x))
}

func (Work_PublishStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9cf60e12930bf818, []int{0, 1}
}

type Work struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Work) Reset()         { *m = Work{} }
func (m *Work) String() string { return proto.CompactTextString(m) }
func (*Work) ProtoMessage()    {}
func (*Work) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cf60e12930bf818, []int{0}
}

func (m *Work) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Work.Unmarshal(m, b)
}
func (m *Work) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Work.Marshal(b, m, deterministic)
}
func (m *Work) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Work.Merge(m, src)
}
func (m *Work) XXX_Size() int {
	return xxx_messageInfo_Work.Size(m)
}
func (m *Work) XXX_DiscardUnknown() {
	xxx_messageInfo_Work.DiscardUnknown(m)
}

var xxx_messageInfo_Work proto.InternalMessageInfo

type Work_SubWork struct {
	// идентификатор произведения
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// оригинальное название
	OrigName string `protobuf:"bytes,2,opt,name=orig_name,json=origName,proto3" json:"orig_name,omitempty"`
	// название на русском
	RusName string `protobuf:"bytes,3,opt,name=rus_name,json=rusName,proto3" json:"rus_name,omitempty"`
	// год публикации
	Year uint64 `protobuf:"varint,4,opt,name=year,proto3" json:"year,omitempty"`
	// тип произведения
	WorkType Work_WorkType `protobuf:"varint,5,opt,name=work_type,json=workType,proto3,enum=Work_WorkType" json:"work_type,omitempty"`
	// рейтинг
	Rating float64 `protobuf:"fixed64,6,opt,name=rating,proto3" json:"rating,omitempty"`
	// кол-во оценок
	Marks uint64 `protobuf:"varint,7,opt,name=marks,proto3" json:"marks,omitempty"`
	// кол-во отзывов
	Reviews uint64 `protobuf:"varint,8,opt,name=reviews,proto3" json:"reviews,omitempty"`
	// является ли произведение дополнительным
	Plus bool `protobuf:"varint,9,opt,name=plus,proto3" json:"plus,omitempty"`
	// статус публикации (не закончено, в планах, etc.)
	PublishStatus []Work_PublishStatus `protobuf:"varint,10,rep,packed,name=publish_status,json=publishStatus,proto3,enum=Work_PublishStatus" json:"publish_status,omitempty"`
	// дочерние произведения
	Subworks             []*Work_SubWork `protobuf:"bytes,11,rep,name=subworks,proto3" json:"subworks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Work_SubWork) Reset()         { *m = Work_SubWork{} }
func (m *Work_SubWork) String() string { return proto.CompactTextString(m) }
func (*Work_SubWork) ProtoMessage()    {}
func (*Work_SubWork) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cf60e12930bf818, []int{0, 0}
}

func (m *Work_SubWork) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Work_SubWork.Unmarshal(m, b)
}
func (m *Work_SubWork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Work_SubWork.Marshal(b, m, deterministic)
}
func (m *Work_SubWork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Work_SubWork.Merge(m, src)
}
func (m *Work_SubWork) XXX_Size() int {
	return xxx_messageInfo_Work_SubWork.Size(m)
}
func (m *Work_SubWork) XXX_DiscardUnknown() {
	xxx_messageInfo_Work_SubWork.DiscardUnknown(m)
}

var xxx_messageInfo_Work_SubWork proto.InternalMessageInfo

func (m *Work_SubWork) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Work_SubWork) GetOrigName() string {
	if m != nil {
		return m.OrigName
	}
	return ""
}

func (m *Work_SubWork) GetRusName() string {
	if m != nil {
		return m.RusName
	}
	return ""
}

func (m *Work_SubWork) GetYear() uint64 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *Work_SubWork) GetWorkType() Work_WorkType {
	if m != nil {
		return m.WorkType
	}
	return Work_WORK_TYPE_UNKNOWN
}

func (m *Work_SubWork) GetRating() float64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *Work_SubWork) GetMarks() uint64 {
	if m != nil {
		return m.Marks
	}
	return 0
}

func (m *Work_SubWork) GetReviews() uint64 {
	if m != nil {
		return m.Reviews
	}
	return 0
}

func (m *Work_SubWork) GetPlus() bool {
	if m != nil {
		return m.Plus
	}
	return false
}

func (m *Work_SubWork) GetPublishStatus() []Work_PublishStatus {
	if m != nil {
		return m.PublishStatus
	}
	return nil
}

func (m *Work_SubWork) GetSubworks() []*Work_SubWork {
	if m != nil {
		return m.Subworks
	}
	return nil
}

type Work_SubWorksResponse struct {
	// айди произведения, для которого был запрос
	WorkId uint64 `protobuf:"varint,1,opt,name=work_id,json=workId,proto3" json:"work_id,omitempty"`
	// произведения, входящие в запрашиваемое
	Subworks             []*Work_SubWork `protobuf:"bytes,2,rep,name=subworks,proto3" json:"subworks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Work_SubWorksResponse) Reset()         { *m = Work_SubWorksResponse{} }
func (m *Work_SubWorksResponse) String() string { return proto.CompactTextString(m) }
func (*Work_SubWorksResponse) ProtoMessage()    {}
func (*Work_SubWorksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cf60e12930bf818, []int{0, 1}
}

func (m *Work_SubWorksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Work_SubWorksResponse.Unmarshal(m, b)
}
func (m *Work_SubWorksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Work_SubWorksResponse.Marshal(b, m, deterministic)
}
func (m *Work_SubWorksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Work_SubWorksResponse.Merge(m, src)
}
func (m *Work_SubWorksResponse) XXX_Size() int {
	return xxx_messageInfo_Work_SubWorksResponse.Size(m)
}
func (m *Work_SubWorksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Work_SubWorksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Work_SubWorksResponse proto.InternalMessageInfo

func (m *Work_SubWorksResponse) GetWorkId() uint64 {
	if m != nil {
		return m.WorkId
	}
	return 0
}

func (m *Work_SubWorksResponse) GetSubworks() []*Work_SubWork {
	if m != nil {
		return m.Subworks
	}
	return nil
}

func init() {
	proto.RegisterEnum("Work_WorkType", Work_WorkType_name, Work_WorkType_value)
	proto.RegisterEnum("Work_PublishStatus", Work_PublishStatus_name, Work_PublishStatus_value)
	proto.RegisterType((*Work)(nil), "Work")
	proto.RegisterType((*Work_SubWork)(nil), "Work.SubWork")
	proto.RegisterType((*Work_SubWorksResponse)(nil), "Work.SubWorksResponse")
}

func init() { proto.RegisterFile("proto/work.proto", fileDescriptor_9cf60e12930bf818) }

var fileDescriptor_9cf60e12930bf818 = []byte{
	// 763 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x5d, 0x6f, 0xdb, 0x36,
	0x14, 0x9d, 0x6c, 0xc7, 0x1f, 0x37, 0x8d, 0xcb, 0x32, 0x5f, 0x8a, 0x93, 0xb5, 0x46, 0x36, 0x0c,
	0x1a, 0x06, 0xb4, 0x40, 0xf6, 0xb6, 0x37, 0x46, 0xe6, 0x2c, 0x22, 0x32, 0x29, 0x50, 0x74, 0x5c,
	0xf5, 0x45, 0xb0, 0x17, 0xa1, 0x33, 0xd2, 0xc4, 0x82, 0x64, 0x2d, 0xc8, 0xf3, 0xfe, 0xc6, 0xfe,
	0xd6, 0x1e, 0xf7, 0x5f, 0x06, 0x51, 0x6e, 0x6c, 0x0a, 0xc3, 0x5e, 0x84, 0x7b, 0xcf, 0x39, 0xbc,
	0x3c, 0xf7, 0x92, 0x14, 0xa0, 0x34, 0x5b, 0xad, 0x57, 0x1f, 0x9e, 0x56, 0xd9, 0xfd, 0x7b, 0x1d,
	0x5e, 0xfe, 0xb5, 0x0f, 0xad, 0xd9, 0x2a, 0xbb, 0x1f, 0xfc, 0xdd, 0x80, 0x4e, 0x58, 0x2c, 0xca,
	0x18, 0xf7, 0xa1, 0xb1, 0xbc, 0xb3, 0xad, 0xa1, 0xe5, 0xb4, 0x64, 0x63, 0x79, 0x87, 0xcf, 0xa1,
	0xb7, 0xca, 0x96, 0x9f, 0xe3, 0xc7, 0xf9, 0x43, 0x62, 0x37, 0x86, 0x96, 0xd3, 0x93, 0xdd, 0x12,
	0xe0, 0xf3, 0x87, 0x04, 0x9f, 0x41, 0x37, 0x2b, 0xf2, 0x8a, 0x6b, 0x6a, 0xae, 0x93, 0x15, 0xb9,
	0xa6, 0x30, 0xb4, 0x9e, 0x93, 0x79, 0x66, 0xb7, 0x74, 0x25, 0x1d, 0xe3, 0x9f, 0xa0, 0x57, 0x6e,
	0x1f, 0xaf, 0x9f, 0xd3, 0xc4, 0xde, 0x1b, 0x5a, 0x4e, 0xff, 0xaa, 0xff, 0xbe, 0xdc, 0x55, 0x7f,
	0xd4, 0x73, 0x9a, 0xc8, 0xee, 0xd3, 0x26, 0xc2, 0x27, 0xd0, 0xce, 0xe6, 0xeb, 0xe5, 0xe3, 0x67,
	0xbb, 0x3d, 0xb4, 0x1c, 0x4b, 0x6e, 0x32, 0x7c, 0x04, 0x7b, 0x0f, 0xf3, 0xec, 0x3e, 0xb7, 0x3b,
	0xba, 0x72, 0x95, 0x60, 0x1b, 0x3a, 0x59, 0xf2, 0xc7, 0x32, 0x79, 0xca, 0xed, 0xae, 0xc6, 0xbf,
	0xa6, 0xa5, 0x91, 0xf4, 0x4b, 0x91, 0xdb, 0xbd, 0xa1, 0xe5, 0x74, 0xa5, 0x8e, 0xf1, 0x2f, 0xd0,
	0x4f, 0x8b, 0xc5, 0x97, 0x65, 0xfe, 0x7b, 0x9c, 0xaf, 0xe7, 0xeb, 0x22, 0xb7, 0x61, 0xd8, 0x74,
	0xfa, 0x57, 0x87, 0x95, 0x9b, 0xa0, 0xe2, 0x42, 0x4d, 0xc9, 0x83, 0x74, 0x37, 0xc5, 0x3f, 0x42,
	0x37, 0x2f, 0x16, 0xa5, 0xcd, 0xdc, 0xde, 0x1f, 0x36, 0x9d, 0xfd, 0xab, 0x83, 0x6a, 0xd5, 0x66,
	0x82, 0xf2, 0x85, 0x1e, 0xdc, 0x02, 0xda, 0x80, 0xb9, 0x4c, 0xf2, 0x74, 0xf5, 0x98, 0x27, 0xf8,
	0x14, 0x3a, 0x7a, 0x06, 0x2f, 0x43, 0x6e, 0x97, 0x29, 0xbb, 0x33, 0xea, 0x36, 0xfe, 0xb7, 0xee,
	0xe5, 0x3f, 0x7b, 0xd0, 0xfd, 0x3a, 0x31, 0x7c, 0x0c, 0x6f, 0x66, 0x42, 0xde, 0xc4, 0x2a, 0x0a,
	0x68, 0x3c, 0xe5, 0x37, 0x5c, 0xcc, 0x38, 0xfa, 0x06, 0x1f, 0xc2, 0xeb, 0x2d, 0xcc, 0xc5, 0x2d,
	0xf5, 0x91, 0x85, 0x6d, 0x38, 0xda, 0x82, 0xae, 0xf0, 0x7d, 0xea, 0x2a, 0x26, 0x38, 0x6a, 0x98,
	0x72, 0x37, 0x72, 0x7d, 0x8a, 0x9a, 0x18, 0x43, 0x7f, 0x0b, 0x06, 0x82, 0x4e, 0x50, 0xcb, 0x14,
	0x0a, 0xe5, 0x51, 0x89, 0xf6, 0x4c, 0xa1, 0x22, 0x3e, 0x45, 0x6d, 0x53, 0x48, 0xc3, 0x90, 0x44,
	0xa8, 0x63, 0x9a, 0x25, 0x52, 0xb1, 0x72, 0xa3, 0xae, 0xb9, 0x9e, 0x06, 0xcc, 0x45, 0x3d, 0x7c,
	0x02, 0x78, 0x47, 0xca, 0x95, 0xf0, 0xc5, 0x38, 0x42, 0x60, 0xd6, 0x0d, 0x18, 0x75, 0x29, 0xda,
	0x37, 0xc5, 0xa1, 0x4b, 0x39, 0x91, 0x4c, 0xa0, 0x57, 0x66, 0xc3, 0x23, 0xe1, 0x4e, 0x27, 0x94,
	0x2b, 0xe2, 0xa3, 0x03, 0x93, 0x99, 0x30, 0x57, 0x8a, 0x50, 0x09, 0x19, 0xa1, 0x3e, 0x3e, 0x02,
	0xb4, 0xb3, 0x86, 0x85, 0x21, 0x95, 0xe8, 0x75, 0x4d, 0x2f, 0xb8, 0x18, 0x4b, 0x12, 0x78, 0x11,
	0x42, 0xa6, 0xa1, 0x50, 0x4d, 0x47, 0x11, 0x7a, 0x83, 0xcf, 0xe0, 0x78, 0xa7, 0x23, 0x5e, 0x4e,
	0x54, 0x04, 0x74, 0x14, 0x21, 0x6c, 0x7a, 0x9d, 0x90, 0x31, 0xf9, 0xc4, 0x38, 0x45, 0x87, 0xb5,
	0x23, 0x10, 0x13, 0xf6, 0x11, 0x1d, 0x99, 0xe0, 0x84, 0xf0, 0x31, 0x41, 0xc7, 0x78, 0x00, 0x27,
	0x5b, 0x50, 0xfb, 0x60, 0x6e, 0x75, 0xc4, 0x27, 0x75, 0x37, 0x65, 0x4b, 0xa7, 0xa6, 0xf9, 0xd0,
	0x13, 0x52, 0x55, 0x8c, 0x6d, 0x36, 0x1b, 0xde, 0x50, 0xe5, 0x7a, 0xe8, 0x0c, 0x9f, 0xc2, 0xe1,
	0x16, 0x95, 0x34, 0x10, 0x52, 0x91, 0x31, 0x45, 0x03, 0xfc, 0x16, 0x06, 0xbb, 0x1e, 0xf9, 0x88,
	0x95, 0xf7, 0x87, 0xf8, 0xd5, 0x8d, 0x39, 0x37, 0xcf, 0x97, 0x7e, 0x74, 0xa9, 0x0c, 0x14, 0xba,
	0x30, 0xeb, 0x31, 0xae, 0xa8, 0xbc, 0x65, 0x74, 0x86, 0xbe, 0x35, 0xb7, 0x97, 0x54, 0xa3, 0x6f,
	0x2f, 0xff, 0x6c, 0xc0, 0x81, 0xf1, 0x06, 0xcb, 0x8e, 0x83, 0xe9, 0xb5, 0xcf, 0x42, 0x2f, 0x0e,
	0x15, 0x51, 0xd3, 0x70, 0xe7, 0xa6, 0xbf, 0x83, 0xf3, 0x1a, 0xc7, 0x85, 0x8a, 0x7f, 0x65, 0x9c,
	0x85, 0x1e, 0x1d, 0x21, 0x0b, 0x0f, 0xe1, 0xe2, 0x3f, 0x04, 0x1b, 0x88, 0x8e, 0x50, 0x03, 0xff,
	0x00, 0x97, 0x75, 0x05, 0x55, 0xda, 0x98, 0x86, 0x5d, 0xa2, 0x5f, 0x49, 0x13, 0x7f, 0x07, 0xef,
	0x6a, 0x3a, 0x72, 0x4b, 0x98, 0x4f, 0xae, 0x7d, 0x1a, 0x0b, 0xee, 0x97, 0xe7, 0xd8, 0xc2, 0x0e,
	0x7c, 0x5f, 0x13, 0x05, 0x3e, 0xe1, 0x9c, 0x8e, 0xe2, 0xeb, 0x28, 0x56, 0x1e, 0x8d, 0xc9, 0x54,
	0x79, 0xa2, 0x7c, 0x36, 0x17, 0x60, 0xd7, 0x95, 0x2f, 0xa6, 0xda, 0xd7, 0xaf, 0x3e, 0x41, 0xbe,
	0x2a, 0xb2, 0xdf, 0x92, 0xfc, 0x43, 0xba, 0x58, 0xb4, 0xf5, 0x3f, 0xfb, 0xe7, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xfe, 0xf1, 0x4b, 0x6a, 0xc7, 0x05, 0x00, 0x00,
}
