// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1-devel
// 	protoc        v3.11.4
// source: proto/bookcase.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Bookcase_BookcaseType int32

const (
	Bookcase_BOOKCASE_TYPE_UNKNOWN Bookcase_BookcaseType = 0
	// Прочитать
	Bookcase_BOOKCASE_TYPE_READ Bookcase_BookcaseType = 1
	// Ожидаю
	Bookcase_BOOKCASE_TYPE_WAIT Bookcase_BookcaseType = 2
	// Куплю
	Bookcase_BOOKCASE_TYPE_BUY Bookcase_BookcaseType = 3
	// Продам
	Bookcase_BOOKCASE_TYPE_SALE Bookcase_BookcaseType = 4
	// Прочее
	Bookcase_BOOKCASE_TYPE_FREE Bookcase_BookcaseType = 5
)

// Enum value maps for Bookcase_BookcaseType.
var (
	Bookcase_BookcaseType_name = map[int32]string{
		0: "BOOKCASE_TYPE_UNKNOWN",
		1: "BOOKCASE_TYPE_READ",
		2: "BOOKCASE_TYPE_WAIT",
		3: "BOOKCASE_TYPE_BUY",
		4: "BOOKCASE_TYPE_SALE",
		5: "BOOKCASE_TYPE_FREE",
	}
	Bookcase_BookcaseType_value = map[string]int32{
		"BOOKCASE_TYPE_UNKNOWN": 0,
		"BOOKCASE_TYPE_READ":    1,
		"BOOKCASE_TYPE_WAIT":    2,
		"BOOKCASE_TYPE_BUY":     3,
		"BOOKCASE_TYPE_SALE":    4,
		"BOOKCASE_TYPE_FREE":    5,
	}
)

func (x Bookcase_BookcaseType) Enum() *Bookcase_BookcaseType {
	p := new(Bookcase_BookcaseType)
	*p = x
	return p
}

func (x Bookcase_BookcaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bookcase_BookcaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_bookcase_proto_enumTypes[0].Descriptor()
}

func (Bookcase_BookcaseType) Type() protoreflect.EnumType {
	return &file_proto_bookcase_proto_enumTypes[0]
}

func (x Bookcase_BookcaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bookcase_BookcaseType.Descriptor instead.
func (Bookcase_BookcaseType) EnumDescriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0, 0}
}

type Bookcase_EditionCorrectnessLevel int32

const (
	Bookcase_EDITION_CORRECTNESS_LEVEL_UNKNOWN Bookcase_EditionCorrectnessLevel = 0
	// Издание проверено
	Bookcase_EDITION_CORRECTNESS_LEVEL_GREEN Bookcase_EditionCorrectnessLevel = 1
	// Издание требует верификации
	Bookcase_EDITION_CORRECTNESS_LEVEL_ORANGE Bookcase_EditionCorrectnessLevel = 2
	// Издание не проверено
	Bookcase_EDITION_CORRECTNESS_LEVEL_RED Bookcase_EditionCorrectnessLevel = 3
)

// Enum value maps for Bookcase_EditionCorrectnessLevel.
var (
	Bookcase_EditionCorrectnessLevel_name = map[int32]string{
		0: "EDITION_CORRECTNESS_LEVEL_UNKNOWN",
		1: "EDITION_CORRECTNESS_LEVEL_GREEN",
		2: "EDITION_CORRECTNESS_LEVEL_ORANGE",
		3: "EDITION_CORRECTNESS_LEVEL_RED",
	}
	Bookcase_EditionCorrectnessLevel_value = map[string]int32{
		"EDITION_CORRECTNESS_LEVEL_UNKNOWN": 0,
		"EDITION_CORRECTNESS_LEVEL_GREEN":   1,
		"EDITION_CORRECTNESS_LEVEL_ORANGE":  2,
		"EDITION_CORRECTNESS_LEVEL_RED":     3,
	}
)

func (x Bookcase_EditionCorrectnessLevel) Enum() *Bookcase_EditionCorrectnessLevel {
	p := new(Bookcase_EditionCorrectnessLevel)
	*p = x
	return p
}

func (x Bookcase_EditionCorrectnessLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bookcase_EditionCorrectnessLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_bookcase_proto_enumTypes[1].Descriptor()
}

func (Bookcase_EditionCorrectnessLevel) Type() protoreflect.EnumType {
	return &file_proto_bookcase_proto_enumTypes[1]
}

func (x Bookcase_EditionCorrectnessLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bookcase_EditionCorrectnessLevel.Descriptor instead.
func (Bookcase_EditionCorrectnessLevel) EnumDescriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0, 1}
}

type Bookcase_EditionType int32

const (
	Bookcase_EDITION_TYPE_UNKNOWN Bookcase_EditionType = 0
	// Авторская книга
	Bookcase_EDITION_TYPE_AUTHOR_BOOK Bookcase_EditionType = 1
	// Авторский сборник
	Bookcase_EDITION_TYPE_AUTHOR_COMPILATION Bookcase_EditionType = 2
	// Сборник
	Bookcase_EDITION_TYPE_COMPILATION Bookcase_EditionType = 3
	// Антология
	Bookcase_EDITION_TYPE_ANTHOLOGY Bookcase_EditionType = 4
	// Хрестоматия
	Bookcase_EDITION_TYPE_CHRESTOMATHY Bookcase_EditionType = 5
	// Журнал
	Bookcase_EDITION_TYPE_MAGAZINE Bookcase_EditionType = 6
	// Фэнзин
	Bookcase_EDITION_TYPE_FANZINE Bookcase_EditionType = 7
	// Альманах
	Bookcase_EDITION_TYPE_ALMANAC Bookcase_EditionType = 8
	// Газета
	Bookcase_EDITION_TYPE_NEWSPAPER Bookcase_EditionType = 9
	// Аудиокнига
	Bookcase_EDITION_TYPE_AUDIOBOOK Bookcase_EditionType = 10
	// Иллюстрированный альбом
	Bookcase_EDITION_TYPE_ILLUSTRATED_ALBUM Bookcase_EditionType = 11
	// Диафильм
	Bookcase_EDITION_TYPE_FILM_STRIP Bookcase_EditionType = 12
)

// Enum value maps for Bookcase_EditionType.
var (
	Bookcase_EditionType_name = map[int32]string{
		0:  "EDITION_TYPE_UNKNOWN",
		1:  "EDITION_TYPE_AUTHOR_BOOK",
		2:  "EDITION_TYPE_AUTHOR_COMPILATION",
		3:  "EDITION_TYPE_COMPILATION",
		4:  "EDITION_TYPE_ANTHOLOGY",
		5:  "EDITION_TYPE_CHRESTOMATHY",
		6:  "EDITION_TYPE_MAGAZINE",
		7:  "EDITION_TYPE_FANZINE",
		8:  "EDITION_TYPE_ALMANAC",
		9:  "EDITION_TYPE_NEWSPAPER",
		10: "EDITION_TYPE_AUDIOBOOK",
		11: "EDITION_TYPE_ILLUSTRATED_ALBUM",
		12: "EDITION_TYPE_FILM_STRIP",
	}
	Bookcase_EditionType_value = map[string]int32{
		"EDITION_TYPE_UNKNOWN":            0,
		"EDITION_TYPE_AUTHOR_BOOK":        1,
		"EDITION_TYPE_AUTHOR_COMPILATION": 2,
		"EDITION_TYPE_COMPILATION":        3,
		"EDITION_TYPE_ANTHOLOGY":          4,
		"EDITION_TYPE_CHRESTOMATHY":       5,
		"EDITION_TYPE_MAGAZINE":           6,
		"EDITION_TYPE_FANZINE":            7,
		"EDITION_TYPE_ALMANAC":            8,
		"EDITION_TYPE_NEWSPAPER":          9,
		"EDITION_TYPE_AUDIOBOOK":          10,
		"EDITION_TYPE_ILLUSTRATED_ALBUM":  11,
		"EDITION_TYPE_FILM_STRIP":         12,
	}
)

func (x Bookcase_EditionType) Enum() *Bookcase_EditionType {
	p := new(Bookcase_EditionType)
	*p = x
	return p
}

func (x Bookcase_EditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bookcase_EditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_bookcase_proto_enumTypes[2].Descriptor()
}

func (Bookcase_EditionType) Type() protoreflect.EnumType {
	return &file_proto_bookcase_proto_enumTypes[2]
}

func (x Bookcase_EditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bookcase_EditionType.Descriptor instead.
func (Bookcase_EditionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0, 2}
}

type Bookcase_FilmType int32

const (
	Bookcase_FILM_TYPE_UNKNOWN Bookcase_FilmType = 0
	// Фильм
	Bookcase_FILM_TYPE_FILM Bookcase_FilmType = 1
	// Сериал
	Bookcase_FILM_TYPE_SERIES Bookcase_FilmType = 2
	// Эпизод
	Bookcase_FILM_TYPE_EPISODE Bookcase_FilmType = 3
	// Документальный
	Bookcase_FILM_TYPE_DOCUMENTARY Bookcase_FilmType = 4
	// Анимационный
	Bookcase_FILM_TYPE_ANIMATION Bookcase_FilmType = 5
	// Короткометражный
	Bookcase_FILM_TYPE_SHORT Bookcase_FilmType = 6
	// Телеспектакль
	Bookcase_FILM_TYPE_SPECTACLE Bookcase_FilmType = 7
)

// Enum value maps for Bookcase_FilmType.
var (
	Bookcase_FilmType_name = map[int32]string{
		0: "FILM_TYPE_UNKNOWN",
		1: "FILM_TYPE_FILM",
		2: "FILM_TYPE_SERIES",
		3: "FILM_TYPE_EPISODE",
		4: "FILM_TYPE_DOCUMENTARY",
		5: "FILM_TYPE_ANIMATION",
		6: "FILM_TYPE_SHORT",
		7: "FILM_TYPE_SPECTACLE",
	}
	Bookcase_FilmType_value = map[string]int32{
		"FILM_TYPE_UNKNOWN":     0,
		"FILM_TYPE_FILM":        1,
		"FILM_TYPE_SERIES":      2,
		"FILM_TYPE_EPISODE":     3,
		"FILM_TYPE_DOCUMENTARY": 4,
		"FILM_TYPE_ANIMATION":   5,
		"FILM_TYPE_SHORT":       6,
		"FILM_TYPE_SPECTACLE":   7,
	}
)

func (x Bookcase_FilmType) Enum() *Bookcase_FilmType {
	p := new(Bookcase_FilmType)
	*p = x
	return p
}

func (x Bookcase_FilmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bookcase_FilmType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_bookcase_proto_enumTypes[3].Descriptor()
}

func (Bookcase_FilmType) Type() protoreflect.EnumType {
	return &file_proto_bookcase_proto_enumTypes[3]
}

func (x Bookcase_FilmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bookcase_FilmType.Descriptor instead.
func (Bookcase_FilmType) EnumDescriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0, 3}
}

type Bookcase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bookcase) Reset() {
	*x = Bookcase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookcase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bookcase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookcase) ProtoMessage() {}

func (x *Bookcase) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookcase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookcase.ProtoReflect.Descriptor instead.
func (*Bookcase) Descriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0}
}

type Bookcase_Bookcase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id книжной полки
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// приватная?
	IsPrivate bool `protobuf:"varint,2,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	// тип
	Type Bookcase_BookcaseType `protobuf:"varint,3,opt,name=type,proto3,enum=Bookcase_BookcaseType" json:"type,omitempty"`
	// название
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// комментарий
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	// порядковый номер
	Index uint64 `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
	// количество элементов
	ItemCount uint64 `protobuf:"varint,7,opt,name=item_count,json=itemCount,proto3" json:"item_count,omitempty"`
}

func (x *Bookcase_Bookcase) Reset() {
	*x = Bookcase_Bookcase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookcase_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bookcase_Bookcase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookcase_Bookcase) ProtoMessage() {}

func (x *Bookcase_Bookcase) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookcase_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookcase_Bookcase.ProtoReflect.Descriptor instead.
func (*Bookcase_Bookcase) Descriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Bookcase_Bookcase) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Bookcase_Bookcase) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *Bookcase_Bookcase) GetType() Bookcase_BookcaseType {
	if x != nil {
		return x.Type
	}
	return Bookcase_BOOKCASE_TYPE_UNKNOWN
}

func (x *Bookcase_Bookcase) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Bookcase_Bookcase) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Bookcase_Bookcase) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Bookcase_Bookcase) GetItemCount() uint64 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

type Bookcase_BookcaseBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// название блока
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// книжные полки
	Bookcases []*Bookcase_Bookcase `protobuf:"bytes,2,rep,name=bookcases,proto3" json:"bookcases,omitempty"`
}

func (x *Bookcase_BookcaseBlock) Reset() {
	*x = Bookcase_BookcaseBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookcase_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bookcase_BookcaseBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookcase_BookcaseBlock) ProtoMessage() {}

func (x *Bookcase_BookcaseBlock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookcase_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookcase_BookcaseBlock.ProtoReflect.Descriptor instead.
func (*Bookcase_BookcaseBlock) Descriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Bookcase_BookcaseBlock) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Bookcase_BookcaseBlock) GetBookcases() []*Bookcase_Bookcase {
	if x != nil {
		return x.Bookcases
	}
	return nil
}

type Bookcase_BookcaseBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// список блоков книжных полок
	BookcaseBlocks []*Bookcase_BookcaseBlock `protobuf:"bytes,1,rep,name=bookcase_blocks,json=bookcaseBlocks,proto3" json:"bookcase_blocks,omitempty"`
}

func (x *Bookcase_BookcaseBlocksResponse) Reset() {
	*x = Bookcase_BookcaseBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookcase_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bookcase_BookcaseBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookcase_BookcaseBlocksResponse) ProtoMessage() {}

func (x *Bookcase_BookcaseBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookcase_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookcase_BookcaseBlocksResponse.ProtoReflect.Descriptor instead.
func (*Bookcase_BookcaseBlocksResponse) Descriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Bookcase_BookcaseBlocksResponse) GetBookcaseBlocks() []*Bookcase_BookcaseBlock {
	if x != nil {
		return x.BookcaseBlocks
	}
	return nil
}

type Bookcase_BookcaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id книжной полки
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// приватная?
	IsPrivate bool `protobuf:"varint,2,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	// тип
	Type Bookcase_BookcaseType `protobuf:"varint,3,opt,name=type,proto3,enum=Bookcase_BookcaseType" json:"type,omitempty"`
	// название
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// комментарий
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Bookcase_BookcaseInfo) Reset() {
	*x = Bookcase_BookcaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookcase_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bookcase_BookcaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookcase_BookcaseInfo) ProtoMessage() {}

func (x *Bookcase_BookcaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookcase_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookcase_BookcaseInfo.ProtoReflect.Descriptor instead.
func (*Bookcase_BookcaseInfo) Descriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Bookcase_BookcaseInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Bookcase_BookcaseInfo) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *Bookcase_BookcaseInfo) GetType() Bookcase_BookcaseType {
	if x != nil {
		return x.Type
	}
	return Bookcase_BOOKCASE_TYPE_UNKNOWN
}

func (x *Bookcase_BookcaseInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Bookcase_BookcaseInfo) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type Bookcase_Offer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL предложения
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// цена
	Price uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *Bookcase_Offer) Reset() {
	*x = Bookcase_Offer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookcase_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bookcase_Offer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookcase_Offer) ProtoMessage() {}

func (x *Bookcase_Offer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookcase_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookcase_Offer.ProtoReflect.Descriptor instead.
func (*Bookcase_Offer) Descriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Bookcase_Offer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Bookcase_Offer) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type Bookcase_Offers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// предложение на Озоне
	Ozon *Bookcase_Offer `protobuf:"bytes,1,opt,name=ozon,proto3" json:"ozon,omitempty"`
	// предложение на Лабиринте
	Labirint *Bookcase_Offer `protobuf:"bytes,2,opt,name=labirint,proto3" json:"labirint,omitempty"`
}

func (x *Bookcase_Offers) Reset() {
	*x = Bookcase_Offers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookcase_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bookcase_Offers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookcase_Offers) ProtoMessage() {}

func (x *Bookcase_Offers) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookcase_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookcase_Offers.ProtoReflect.Descriptor instead.
func (*Bookcase_Offers) Descriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Bookcase_Offers) GetOzon() *Bookcase_Offer {
	if x != nil {
		return x.Ozon
	}
	return nil
}

func (x *Bookcase_Offers) GetLabirint() *Bookcase_Offer {
	if x != nil {
		return x.Labirint
	}
	return nil
}

type Bookcase_Edition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id издания
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// тип (авторская книга/сборник/etc; может отсутствовать, если не задан)
	Type Bookcase_EditionType `protobuf:"varint,2,opt,name=type,proto3,enum=Bookcase_EditionType" json:"type,omitempty"`
	// уровень проверенности
	CorrectnessLevel Bookcase_EditionCorrectnessLevel `protobuf:"varint,3,opt,name=correctness_level,json=correctnessLevel,proto3,enum=Bookcase_EditionCorrectnessLevel" json:"correctness_level,omitempty"`
	// URL обложки
	Cover string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	// авторы
	Authors string `protobuf:"bytes,5,opt,name=authors,proto3" json:"authors,omitempty"`
	// название
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	// год публикации
	Year uint64 `protobuf:"varint,7,opt,name=year,proto3" json:"year,omitempty"`
	// издательства
	Publishers string `protobuf:"bytes,8,opt,name=publishers,proto3" json:"publishers,omitempty"`
	// описание
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// предложения в магазинах
	Offers *Bookcase_Offers `protobuf:"bytes,10,opt,name=offers,proto3" json:"offers,omitempty"`
	// комментарий
	Comment string `protobuf:"bytes,11,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Bookcase_Edition) Reset() {
	*x = Bookcase_Edition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookcase_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bookcase_Edition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookcase_Edition) ProtoMessage() {}

func (x *Bookcase_Edition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookcase_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookcase_Edition.ProtoReflect.Descriptor instead.
func (*Bookcase_Edition) Descriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Bookcase_Edition) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Bookcase_Edition) GetType() Bookcase_EditionType {
	if x != nil {
		return x.Type
	}
	return Bookcase_EDITION_TYPE_UNKNOWN
}

func (x *Bookcase_Edition) GetCorrectnessLevel() Bookcase_EditionCorrectnessLevel {
	if x != nil {
		return x.CorrectnessLevel
	}
	return Bookcase_EDITION_CORRECTNESS_LEVEL_UNKNOWN
}

func (x *Bookcase_Edition) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Bookcase_Edition) GetAuthors() string {
	if x != nil {
		return x.Authors
	}
	return ""
}

func (x *Bookcase_Edition) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Bookcase_Edition) GetYear() uint64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Bookcase_Edition) GetPublishers() string {
	if x != nil {
		return x.Publishers
	}
	return ""
}

func (x *Bookcase_Edition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Bookcase_Edition) GetOffers() *Bookcase_Offers {
	if x != nil {
		return x.Offers
	}
	return nil
}

func (x *Bookcase_Edition) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type Bookcase_EditionBookcaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// информация о полке
	Bookcase *Bookcase_BookcaseInfo `protobuf:"bytes,1,opt,name=bookcase,proto3" json:"bookcase,omitempty"`
	// список изданий на полке
	Editions []*Bookcase_Edition `protobuf:"bytes,2,rep,name=editions,proto3" json:"editions,omitempty"`
	// страницы
	Pages *Common_Pages `protobuf:"bytes,3,opt,name=pages,proto3" json:"pages,omitempty"`
}

func (x *Bookcase_EditionBookcaseResponse) Reset() {
	*x = Bookcase_EditionBookcaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookcase_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bookcase_EditionBookcaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookcase_EditionBookcaseResponse) ProtoMessage() {}

func (x *Bookcase_EditionBookcaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookcase_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookcase_EditionBookcaseResponse.ProtoReflect.Descriptor instead.
func (*Bookcase_EditionBookcaseResponse) Descriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Bookcase_EditionBookcaseResponse) GetBookcase() *Bookcase_BookcaseInfo {
	if x != nil {
		return x.Bookcase
	}
	return nil
}

func (x *Bookcase_EditionBookcaseResponse) GetEditions() []*Bookcase_Edition {
	if x != nil {
		return x.Editions
	}
	return nil
}

func (x *Bookcase_EditionBookcaseResponse) GetPages() *Common_Pages {
	if x != nil {
		return x.Pages
	}
	return nil
}

type Bookcase_Film struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id фильма
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// тип (фильм/сериал/etc; может отсутствовать, если не задан)
	Type Bookcase_FilmType `protobuf:"varint,2,opt,name=type,proto3,enum=Bookcase_FilmType" json:"type,omitempty"`
	// URL постера
	Poster string `protobuf:"bytes,3,opt,name=poster,proto3" json:"poster,omitempty"`
	// название фильма на русском языке
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// название фильма в оригинале
	OriginalTitle string `protobuf:"bytes,5,opt,name=original_title,json=originalTitle,proto3" json:"original_title,omitempty"`
	// год выпуска (для всего, кроме сериалов)
	Year uint64 `protobuf:"varint,6,opt,name=year,proto3" json:"year,omitempty"`
	// год старта трансляции (для сериалов)
	StartYear uint64 `protobuf:"varint,7,opt,name=start_year,json=startYear,proto3" json:"start_year,omitempty"`
	// год окончания трансляции (для сериалов)
	EndYear uint64 `protobuf:"varint,8,opt,name=end_year,json=endYear,proto3" json:"end_year,omitempty"`
	// страны производства
	Countries string `protobuf:"bytes,9,opt,name=countries,proto3" json:"countries,omitempty"`
	// жанры
	Genres string `protobuf:"bytes,10,opt,name=genres,proto3" json:"genres,omitempty"`
	// режиссеры
	Directors string `protobuf:"bytes,11,opt,name=directors,proto3" json:"directors,omitempty"`
	// сценаристы
	ScreenWriters string `protobuf:"bytes,12,opt,name=screen_writers,json=screenWriters,proto3" json:"screen_writers,omitempty"`
	// актеры
	Actors string `protobuf:"bytes,13,opt,name=actors,proto3" json:"actors,omitempty"`
	// описание
	Description string `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	// комментарий
	Comment string `protobuf:"bytes,15,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Bookcase_Film) Reset() {
	*x = Bookcase_Film{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookcase_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bookcase_Film) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookcase_Film) ProtoMessage() {}

func (x *Bookcase_Film) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookcase_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookcase_Film.ProtoReflect.Descriptor instead.
func (*Bookcase_Film) Descriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Bookcase_Film) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Bookcase_Film) GetType() Bookcase_FilmType {
	if x != nil {
		return x.Type
	}
	return Bookcase_FILM_TYPE_UNKNOWN
}

func (x *Bookcase_Film) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *Bookcase_Film) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Bookcase_Film) GetOriginalTitle() string {
	if x != nil {
		return x.OriginalTitle
	}
	return ""
}

func (x *Bookcase_Film) GetYear() uint64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Bookcase_Film) GetStartYear() uint64 {
	if x != nil {
		return x.StartYear
	}
	return 0
}

func (x *Bookcase_Film) GetEndYear() uint64 {
	if x != nil {
		return x.EndYear
	}
	return 0
}

func (x *Bookcase_Film) GetCountries() string {
	if x != nil {
		return x.Countries
	}
	return ""
}

func (x *Bookcase_Film) GetGenres() string {
	if x != nil {
		return x.Genres
	}
	return ""
}

func (x *Bookcase_Film) GetDirectors() string {
	if x != nil {
		return x.Directors
	}
	return ""
}

func (x *Bookcase_Film) GetScreenWriters() string {
	if x != nil {
		return x.ScreenWriters
	}
	return ""
}

func (x *Bookcase_Film) GetActors() string {
	if x != nil {
		return x.Actors
	}
	return ""
}

func (x *Bookcase_Film) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Bookcase_Film) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type Bookcase_FilmBookcaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// информация о полке
	Bookcase *Bookcase_BookcaseInfo `protobuf:"bytes,1,opt,name=bookcase,proto3" json:"bookcase,omitempty"`
	// список фильмов на полке
	Films []*Bookcase_Film `protobuf:"bytes,2,rep,name=films,proto3" json:"films,omitempty"`
	// страницы
	Pages *Common_Pages `protobuf:"bytes,3,opt,name=pages,proto3" json:"pages,omitempty"`
}

func (x *Bookcase_FilmBookcaseResponse) Reset() {
	*x = Bookcase_FilmBookcaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookcase_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bookcase_FilmBookcaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookcase_FilmBookcaseResponse) ProtoMessage() {}

func (x *Bookcase_FilmBookcaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookcase_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookcase_FilmBookcaseResponse.ProtoReflect.Descriptor instead.
func (*Bookcase_FilmBookcaseResponse) Descriptor() ([]byte, []int) {
	return file_proto_bookcase_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Bookcase_FilmBookcaseResponse) GetBookcase() *Bookcase_BookcaseInfo {
	if x != nil {
		return x.Bookcase
	}
	return nil
}

func (x *Bookcase_FilmBookcaseResponse) GetFilms() []*Bookcase_Film {
	if x != nil {
		return x.Films
	}
	return nil
}

func (x *Bookcase_FilmBookcaseResponse) GetPages() *Common_Pages {
	if x != nil {
		return x.Pages
	}
	return nil
}

var File_proto_bookcase_proto protoreflect.FileDescriptor

var file_proto_bookcase_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x15, 0x0a, 0x08, 0x42,
	0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x1a, 0xca, 0x01, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b,
	0x63, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x6f, 0x6f,
	0x6b, 0x63, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x57, 0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61,
	0x73, 0x65, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x5a, 0x0a,
	0x16, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x63,
	0x61, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x63, 0x61, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x63,
	0x61, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x99, 0x01, 0x0a, 0x0c, 0x42, 0x6f,
	0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x2f, 0x0a, 0x05, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x5a, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x12, 0x23, 0x0a, 0x04, 0x6f, 0x7a, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x04, 0x6f, 0x7a, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x69, 0x72, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x69, 0x72, 0x69,
	0x6e, 0x74, 0x1a, 0xf4, 0x02, 0x0a, 0x07, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x42,
	0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x10, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xa1, 0x01, 0x0a, 0x17, 0x45, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x6f,
	0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x1a, 0xb0, 0x03,
	0x0a, 0x04, 0x46, 0x69, 0x6c, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x1a, 0x95, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x6d, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x63, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42, 0x6f,
	0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x05, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x42,
	0x6f, 0x6f, 0x6b, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x05, 0x66, 0x69,
	0x6c, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x42, 0x6f, 0x6f,
	0x6b, 0x63, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f, 0x4f,
	0x4b, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4f, 0x4f, 0x4b, 0x43, 0x41, 0x53, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x42, 0x4f, 0x4f, 0x4b, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4f, 0x4f, 0x4b, 0x43, 0x41, 0x53, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x42,
	0x4f, 0x4f, 0x4b, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x4c,
	0x45, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4f, 0x4f, 0x4b, 0x43, 0x41, 0x53, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x05, 0x22, 0xae, 0x01, 0x0a, 0x17,
	0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x47, 0x52, 0x45, 0x45,
	0x4e, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x4e, 0x45, 0x53, 0x53,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x03, 0x22, 0x8b, 0x03, 0x0a,
	0x0b, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x5f, 0x42, 0x4f,
	0x4f, 0x4b, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x49, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x54, 0x48, 0x4f, 0x4c, 0x4f, 0x47,
	0x59, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x48, 0x59,
	0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x47, 0x41, 0x5a, 0x49, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41,
	0x4e, 0x5a, 0x49, 0x4e, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4d, 0x41, 0x4e, 0x41, 0x43, 0x10,
	0x08, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x45, 0x57, 0x53, 0x50, 0x41, 0x50, 0x45, 0x52, 0x10, 0x09, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55,
	0x44, 0x49, 0x4f, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4c, 0x4c, 0x55, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x4c, 0x42, 0x55, 0x4d, 0x10, 0x0b, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49,
	0x4c, 0x4d, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x50, 0x10, 0x0c, 0x22, 0xc4, 0x01, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x4c, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x4d,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x4c, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x50, 0x49, 0x53, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12,
	0x19, 0x0a, 0x15, 0x46, 0x49, 0x4c, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49,
	0x4c, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x41, 0x43, 0x4c, 0x45, 0x10,
	0x07, 0x42, 0x0c, 0x5a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_bookcase_proto_rawDescOnce sync.Once
	file_proto_bookcase_proto_rawDescData = file_proto_bookcase_proto_rawDesc
)

func file_proto_bookcase_proto_rawDescGZIP() []byte {
	file_proto_bookcase_proto_rawDescOnce.Do(func() {
		file_proto_bookcase_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_bookcase_proto_rawDescData)
	})
	return file_proto_bookcase_proto_rawDescData
}

var file_proto_bookcase_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_bookcase_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_bookcase_proto_goTypes = []interface{}{
	(Bookcase_BookcaseType)(0),               // 0: Bookcase.BookcaseType
	(Bookcase_EditionCorrectnessLevel)(0),    // 1: Bookcase.EditionCorrectnessLevel
	(Bookcase_EditionType)(0),                // 2: Bookcase.EditionType
	(Bookcase_FilmType)(0),                   // 3: Bookcase.FilmType
	(*Bookcase)(nil),                         // 4: Bookcase
	(*Bookcase_Bookcase)(nil),                // 5: Bookcase.Bookcase
	(*Bookcase_BookcaseBlock)(nil),           // 6: Bookcase.BookcaseBlock
	(*Bookcase_BookcaseBlocksResponse)(nil),  // 7: Bookcase.BookcaseBlocksResponse
	(*Bookcase_BookcaseInfo)(nil),            // 8: Bookcase.BookcaseInfo
	(*Bookcase_Offer)(nil),                   // 9: Bookcase.Offer
	(*Bookcase_Offers)(nil),                  // 10: Bookcase.Offers
	(*Bookcase_Edition)(nil),                 // 11: Bookcase.Edition
	(*Bookcase_EditionBookcaseResponse)(nil), // 12: Bookcase.EditionBookcaseResponse
	(*Bookcase_Film)(nil),                    // 13: Bookcase.Film
	(*Bookcase_FilmBookcaseResponse)(nil),    // 14: Bookcase.FilmBookcaseResponse
	(*Common_Pages)(nil),                     // 15: Common.Pages
}
var file_proto_bookcase_proto_depIdxs = []int32{
	0,  // 0: Bookcase.Bookcase.type:type_name -> Bookcase.BookcaseType
	5,  // 1: Bookcase.BookcaseBlock.bookcases:type_name -> Bookcase.Bookcase
	6,  // 2: Bookcase.BookcaseBlocksResponse.bookcase_blocks:type_name -> Bookcase.BookcaseBlock
	0,  // 3: Bookcase.BookcaseInfo.type:type_name -> Bookcase.BookcaseType
	9,  // 4: Bookcase.Offers.ozon:type_name -> Bookcase.Offer
	9,  // 5: Bookcase.Offers.labirint:type_name -> Bookcase.Offer
	2,  // 6: Bookcase.Edition.type:type_name -> Bookcase.EditionType
	1,  // 7: Bookcase.Edition.correctness_level:type_name -> Bookcase.EditionCorrectnessLevel
	10, // 8: Bookcase.Edition.offers:type_name -> Bookcase.Offers
	8,  // 9: Bookcase.EditionBookcaseResponse.bookcase:type_name -> Bookcase.BookcaseInfo
	11, // 10: Bookcase.EditionBookcaseResponse.editions:type_name -> Bookcase.Edition
	15, // 11: Bookcase.EditionBookcaseResponse.pages:type_name -> Common.Pages
	3,  // 12: Bookcase.Film.type:type_name -> Bookcase.FilmType
	8,  // 13: Bookcase.FilmBookcaseResponse.bookcase:type_name -> Bookcase.BookcaseInfo
	13, // 14: Bookcase.FilmBookcaseResponse.films:type_name -> Bookcase.Film
	15, // 15: Bookcase.FilmBookcaseResponse.pages:type_name -> Common.Pages
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_proto_bookcase_proto_init() }
func file_proto_bookcase_proto_init() {
	if File_proto_bookcase_proto != nil {
		return
	}
	file_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_bookcase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bookcase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookcase_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bookcase_Bookcase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookcase_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bookcase_BookcaseBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookcase_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bookcase_BookcaseBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookcase_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bookcase_BookcaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookcase_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bookcase_Offer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookcase_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bookcase_Offers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookcase_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bookcase_Edition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookcase_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bookcase_EditionBookcaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookcase_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bookcase_Film); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookcase_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bookcase_FilmBookcaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_bookcase_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_bookcase_proto_goTypes,
		DependencyIndexes: file_proto_bookcase_proto_depIdxs,
		EnumInfos:         file_proto_bookcase_proto_enumTypes,
		MessageInfos:      file_proto_bookcase_proto_msgTypes,
	}.Build()
	File_proto_bookcase_proto = out.File
	file_proto_bookcase_proto_rawDesc = nil
	file_proto_bookcase_proto_goTypes = nil
	file_proto_bookcase_proto_depIdxs = nil
}
