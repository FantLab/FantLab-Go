pipeline {
    agent any

    environment {
        tag = "fantlab/go:go_build_$BUILD_NUMBER"
        credential = 'fldockerhub'
        deployConfig = """version: '3.7'

services:
  go-api:
    image: ${tag}
    ports:
        - ${PORT}:${PORT}
    networks:
        - general
    environment:
        PORT: ${PORT}
        DB_ADDRESS: ${DB_ADDRESS}
        MYSQL_URL: ${MYSQL_URL}
        IMAGES_BASE_URL: ${IMAGES_BASE_URL}
        SIGN_PUB_KEY: ${SIGN_PUB_KEY}
        SIGN_PRIV_KEY: ${SIGN_PRIV_KEY}
    healthcheck:
      test: ['CMD', 'curl', '-sS', 'localhost:${PORT}/v1/ping']
      interval: 10s
      timeout: 30s
      retries: 3
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

networks:
    general:
        driver: overlay
"""
        dockerImage = ''
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: "${COMMIT_HASH}"]], userRemoteConfigs: [[url: 'https://github.com/FantLab/FantLab-Go']]])
            }
        }
        stage('Build') {
            steps {
                script {
                    dockerImage = docker.build tag
                }
            }
        }
        stage('Push') {
            steps {
                script {
                    docker.withRegistry( '', credential ) {
                        dockerImage.push()
                        dockerImage.push('latest')
                    }
                }
            }
        }
        stage('Clean') {
            steps{
                // sh "docker rmi $tag"
                sh "docker container prune -f"
            }
        }
        stage('Deploy') {
            steps{
                sh "echo \"$deployConfig\" | docker stack deploy --prune --compose-file - go-api"
            }
        }
    }
}
